
ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000803c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800820c  0800820c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f8  080083f8  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  080083f8  080083f8  000093f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008400  08008400  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008404  08008404  00009404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008408  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000060  08008468  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  08008468  0000a880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b16  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7f  00000000  00000000  00020ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00023a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001064  00000000  00000000  00024ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b2d  00000000  00000000  00025f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ad5  00000000  00000000  0004aa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3602  00000000  00000000  00064556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147b58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f8  00000000  00000000  00147b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014dc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080081f4 	.word	0x080081f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080081f4 	.word	0x080081f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	460b      	mov	r3, r1
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	230a      	movs	r3, #10
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	f107 030f 	add.w	r3, r7, #15
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	2180      	movs	r1, #128	@ 0x80
 8000e14:	4819      	ldr	r0, [pc, #100]	@ (8000e7c <PCA9685_SetBit+0x90>)
 8000e16:	f002 f9c1 	bl	800319c <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10d      	bne.n	8000e3c <PCA9685_SetBit+0x50>
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	2201      	movs	r2, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	b25a      	sxtb	r2, r3
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	4013      	ands	r3, r2
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e00a      	b.n	8000e52 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	b25a      	sxtb	r2, r3
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	230a      	movs	r3, #10
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	f107 030f 	add.w	r3, r7, #15
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	2180      	movs	r1, #128	@ 0x80
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <PCA9685_SetBit+0x90>)
 8000e6a:	f002 f89d 	bl	8002fa8 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f001 f8c0 	bl	8001ff4 <HAL_Delay>
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200000d8 	.word	0x200000d8

08000e80 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d902      	bls.n	8000e9a <PCA9685_SetPWMFrequency+0x1a>
 8000e94:	2303      	movs	r3, #3
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e00c      	b.n	8000eb4 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	2b18      	cmp	r3, #24
 8000e9e:	d802      	bhi.n	8000ea6 <PCA9685_SetPWMFrequency+0x26>
 8000ea0:	23ff      	movs	r3, #255	@ 0xff
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e006      	b.n	8000eb4 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	031b      	lsls	r3, r3, #12
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <PCA9685_SetPWMFrequency+0x74>)
 8000eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff ff97 	bl	8000dec <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	22fe      	movs	r2, #254	@ 0xfe
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <PCA9685_SetPWMFrequency+0x78>)
 8000ed4:	f002 f868 	bl	8002fa8 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff ff85 	bl	8000dec <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff ff80 	bl	8000dec <PCA9685_SetBit>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	017d7840 	.word	0x017d7840
 8000ef8:	200000d8 	.word	0x200000d8

08000efc <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ffb9 	bl	8000e80 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2105      	movs	r1, #5
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ff6a 	bl	8000dec <PCA9685_SetBit>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	80bb      	strh	r3, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3306      	adds	r3, #6
 8000f3a:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	230a      	movs	r3, #10
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2304      	movs	r3, #4
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2180      	movs	r1, #128	@ 0x80
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <PCA9685_SetPWM+0x60>)
 8000f74:	f002 f818 	bl	8002fa8 <HAL_I2C_Mem_Write>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000d8 	.word	0x200000d8
 8000f84:	00000000 	.word	0x00000000

08000f88 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	ed87 0a00 	vstr	s0, [r7]
 8000f94:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff faf6 	bl	8000588 <__aeabi_f2d>
 8000f9c:	a31b      	add	r3, pc, #108	@ (adr r3, 800100c <PCA9685_SetServoAngle+0x84>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	f7ff fb49 	bl	8000638 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <PCA9685_SetServoAngle+0x80>)
 8000fb4:	f7ff fc6a 	bl	800088c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001000 <PCA9685_SetServoAngle+0x78>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff f981 	bl	80002cc <__adddf3>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f7ff fd43 	bl	8000a5c <__aeabi_d2f>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff97 	bl	8000f20 <PCA9685_SetPWM>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	9999999a 	.word	0x9999999a
 8001004:	40599999 	.word	0x40599999
 8001008:	40668000 	.word	0x40668000
 800100c:	00000000 	.word	0x00000000
 8001010:	40799800 	.word	0x40799800

08001014 <I2C_Scan>:
void I2C_Scan()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	@ 0x38
 8001018:	af00      	add	r7, sp, #0
    char msg[50];
    for (uint8_t addr = 1; addr < 127; addr++)
 800101a:	2301      	movs	r3, #1
 800101c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001020:	e01c      	b.n	800105c <I2C_Scan+0x48>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, (addr << 1), 3, 100) == HAL_OK)
 8001022:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001026:	b29b      	uxth	r3, r3
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	b299      	uxth	r1, r3
 800102c:	2364      	movs	r3, #100	@ 0x64
 800102e:	2203      	movs	r2, #3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <I2C_Scan+0x5c>)
 8001032:	f002 fad9 	bl	80035e8 <HAL_I2C_IsDeviceReady>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <I2C_Scan+0x3e>
        {
            sprintf(msg, "Device found at 0x%X\r\n", addr);
 800103c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	490c      	ldr	r1, [pc, #48]	@ (8001074 <I2C_Scan+0x60>)
 8001044:	4618      	mov	r0, r3
 8001046:	f006 fbb1 	bl	80077ac <siprintf>
            print_msg(msg);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fc3f 	bl	80018d0 <print_msg>
    for (uint8_t addr = 1; addr < 127; addr++)
 8001052:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001056:	3301      	adds	r3, #1
 8001058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800105c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001060:	2b7e      	cmp	r3, #126	@ 0x7e
 8001062:	d9de      	bls.n	8001022 <I2C_Scan+0xe>
        }
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	@ 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000d8 	.word	0x200000d8
 8001074:	0800820c 	.word	0x0800820c

08001078 <main>:

/* USER CODE END 0 */
/* Main function */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b09c      	sub	sp, #112	@ 0x70
 800107c:	af00      	add	r7, sp, #0
    /* Initialize system */
    HAL_Init();
 800107e:	f000 ff47 	bl	8001f10 <HAL_Init>
    SystemClock_Config();
 8001082:	f000 f91f 	bl	80012c4 <SystemClock_Config>

    /* Initialize peripherals */
    MX_GPIO_Init();
 8001086:	f000 fb2b 	bl	80016e0 <MX_GPIO_Init>
    MX_ADC3_Init();
 800108a:	f000 f987 	bl	800139c <MX_ADC3_Init>
    MX_USART3_UART_Init();
 800108e:	f000 facf 	bl	8001630 <MX_USART3_UART_Init>
    MX_USART2_UART_Init();  // Initialize HC-05 UART2
 8001092:	f000 faa3 	bl	80015dc <MX_USART2_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 8001096:	f000 faf5 	bl	8001684 <MX_USB_OTG_FS_PCD_Init>
    MX_DAC_Init();
 800109a:	f000 f9d1 	bl	8001440 <MX_DAC_Init>
    MX_TIM2_Init();
 800109e:	f000 fa27 	bl	80014f0 <MX_TIM2_Init>
    MX_I2C1_Init();
 80010a2:	f000 f9f7 	bl	8001494 <MX_I2C1_Init>

    /* Send initial AT command to HC-05 */
    char message[100];
    char at_command[] = "AT\r\n";
 80010a6:	4a29      	ldr	r2, [pc, #164]	@ (800114c <main+0xd4>)
 80010a8:	463b      	mov	r3, r7
 80010aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	7019      	strb	r1, [r3, #0]
    //HAL_UART_Transmit(&huart2, (uint8_t*)at_command, strlen(at_command), 100);
    HAL_Delay(1000);  // Wait for response
 80010b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b8:	f000 ff9c 	bl	8001ff4 <HAL_Delay>

    //sprintf(message, "Waiting for data from HC-05...\r\n");
    //print_msg(message);

    /* Start PWM for servo */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010bc:	210c      	movs	r1, #12
 80010be:	4824      	ldr	r0, [pc, #144]	@ (8001150 <main+0xd8>)
 80010c0:	f004 fa1e 	bl	8005500 <HAL_TIM_PWM_Start>

    /* Enable UART receive interrupt */
    HAL_UART_Receive_IT(&huart2, (uint8_t*)received_buffer, 4);
 80010c4:	2204      	movs	r2, #4
 80010c6:	4923      	ldr	r1, [pc, #140]	@ (8001154 <main+0xdc>)
 80010c8:	4823      	ldr	r0, [pc, #140]	@ (8001158 <main+0xe0>)
 80010ca:	f005 f8d6 	bl	800627a <HAL_UART_Receive_IT>
    /*Init Serv driver at 50Mhz*/
    PCA9685_Init(50);
 80010ce:	2032      	movs	r0, #50	@ 0x32
 80010d0:	f7ff ff14 	bl	8000efc <PCA9685_Init>

    HAL_StatusTypeDef res;
    uint8_t i2c_address = PCA9685_ADDRESS; // Use 0x80 >> 1 = 0x40
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    res = HAL_I2C_IsDeviceReady(&hi2c1, i2c_address, 3, 100);
 80010da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80010de:	b299      	uxth	r1, r3
 80010e0:	2364      	movs	r3, #100	@ 0x64
 80010e2:	2203      	movs	r2, #3
 80010e4:	481d      	ldr	r0, [pc, #116]	@ (800115c <main+0xe4>)
 80010e6:	f002 fa7f 	bl	80035e8 <HAL_I2C_IsDeviceReady>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    if (res == HAL_OK)
 80010f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <main+0x88>
    {
        print_msg("PCA9685 detected!\r\n");
 80010f8:	4819      	ldr	r0, [pc, #100]	@ (8001160 <main+0xe8>)
 80010fa:	f000 fbe9 	bl	80018d0 <print_msg>
 80010fe:	e002      	b.n	8001106 <main+0x8e>
    }
    else
    {
        print_msg("PCA9685 NOT detected!\r\n");
 8001100:	4818      	ldr	r0, [pc, #96]	@ (8001164 <main+0xec>)
 8001102:	f000 fbe5 	bl	80018d0 <print_msg>
    }
    I2C_Scan();
 8001106:	f7ff ff85 	bl	8001014 <I2C_Scan>
    /* Main loop */
    while (1)
    {

    	if (servo_active)  // If Bluetooth sent '1', move the servos
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <main+0xf0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d011      	beq.n	8001138 <main+0xc0>
    	        {

    	            /* Servo sweep */
    	            PCA9685_SetServoAngle(motor, motor_angle);
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <main+0xf4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4a15      	ldr	r2, [pc, #84]	@ (8001170 <main+0xf8>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	ee07 2a90 	vmov	s15, r2
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff2c 	bl	8000f88 <PCA9685_SetServoAngle>

    	            HAL_Delay(1000);
 8001130:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001134:	f000 ff5e 	bl	8001ff4 <HAL_Delay>
    	        }


        /* Toggle LED for debugging */
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	480e      	ldr	r0, [pc, #56]	@ (8001174 <main+0xfc>)
 800113c:	f001 fdb1 	bl	8002ca2 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8001140:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001144:	f000 ff56 	bl	8001ff4 <HAL_Delay>
    	if (servo_active)  // If Bluetooth sent '1', move the servos
 8001148:	e7df      	b.n	800110a <main+0x92>
 800114a:	bf00      	nop
 800114c:	08008250 	.word	0x08008250
 8001150:	2000012c 	.word	0x2000012c
 8001154:	20000708 	.word	0x20000708
 8001158:	20000174 	.word	0x20000174
 800115c:	200000d8 	.word	0x200000d8
 8001160:	08008224 	.word	0x08008224
 8001164:	08008238 	.word	0x08008238
 8001168:	20000000 	.word	0x20000000
 800116c:	2000072c 	.word	0x2000072c
 8001170:	20000728 	.word	0x20000728
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_UART_RxCpltCallback>:


volatile int last_three_values[3] = {0}; // Array to store last 3 values
volatile uint8_t current_index = 0;      // Index for rolling buffer

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	@ 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a45      	ldr	r2, [pc, #276]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f040 8083 	bne.w	8001290 <HAL_UART_RxCpltCallback+0x118>
        //received_buffer[4] = '\0'; // Null-terminate string

        // Debug print
        print_msg("Received: ");
 800118a:	4844      	ldr	r0, [pc, #272]	@ (800129c <HAL_UART_RxCpltCallback+0x124>)
 800118c:	f000 fba0 	bl	80018d0 <print_msg>
        print_msg(received_buffer);
 8001190:	4843      	ldr	r0, [pc, #268]	@ (80012a0 <HAL_UART_RxCpltCallback+0x128>)
 8001192:	f000 fb9d 	bl	80018d0 <print_msg>
        print_msg("\r\n");
 8001196:	4843      	ldr	r0, [pc, #268]	@ (80012a4 <HAL_UART_RxCpltCallback+0x12c>)
 8001198:	f000 fb9a 	bl	80018d0 <print_msg>

        // Convert received string to integer
        int value = atoi(received_buffer);
 800119c:	4840      	ldr	r0, [pc, #256]	@ (80012a0 <HAL_UART_RxCpltCallback+0x128>)
 800119e:	f006 fb01 	bl	80077a4 <atoi>
 80011a2:	6378      	str	r0, [r7, #52]	@ 0x34

        // Print received value
        char angle_msg[32];


        motor = value / 1000;   // Get the first digit
 80011a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a6:	4a40      	ldr	r2, [pc, #256]	@ (80012a8 <HAL_UART_RxCpltCallback+0x130>)
 80011a8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ac:	1192      	asrs	r2, r2, #6
 80011ae:	17db      	asrs	r3, r3, #31
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	4a3e      	ldr	r2, [pc, #248]	@ (80012ac <HAL_UART_RxCpltCallback+0x134>)
 80011b4:	6013      	str	r3, [r2, #0]
        motor_angle = value % 1000; // Get last three digits
 80011b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_UART_RxCpltCallback+0x130>)
 80011ba:	fb83 1302 	smull	r1, r3, r3, r2
 80011be:	1199      	asrs	r1, r3, #6
 80011c0:	17d3      	asrs	r3, r2, #31
 80011c2:	1acb      	subs	r3, r1, r3
 80011c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	4a38      	ldr	r2, [pc, #224]	@ (80012b0 <HAL_UART_RxCpltCallback+0x138>)
 80011d0:	6013      	str	r3, [r2, #0]
        sprintf(angle_msg, "Angle: %d %d\r\n", motor, motor_angle);
 80011d2:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_UART_RxCpltCallback+0x134>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <HAL_UART_RxCpltCallback+0x138>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f107 000c 	add.w	r0, r7, #12
 80011de:	4935      	ldr	r1, [pc, #212]	@ (80012b4 <HAL_UART_RxCpltCallback+0x13c>)
 80011e0:	f006 fae4 	bl	80077ac <siprintf>
        print_msg(angle_msg);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fb71 	bl	80018d0 <print_msg>


        // Clear any possible UART errors
//        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)) __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_ORE);
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE)) __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_FE);
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d104      	bne.n	8001206 <HAL_UART_RxCpltCallback+0x8e>
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f06f 0202 	mvn.w	r2, #2
 8001204:	601a      	str	r2, [r3, #0]
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_NE)) __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_NE);
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b04      	cmp	r3, #4
 8001212:	d104      	bne.n	800121e <HAL_UART_RxCpltCallback+0xa6>
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0204 	mvn.w	r2, #4
 800121c:	601a      	str	r2, [r3, #0]
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_PE)) __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_PE);
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d104      	bne.n	8001236 <HAL_UART_RxCpltCallback+0xbe>
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 0201 	mvn.w	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)) {
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b08      	cmp	r3, #8
 8001242:	d10d      	bne.n	8001260 <HAL_UART_RxCpltCallback+0xe8>
            __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
            print_msg("Overrun Error Cleared\r\n");
 800125a:	4817      	ldr	r0, [pc, #92]	@ (80012b8 <HAL_UART_RxCpltCallback+0x140>)
 800125c:	f000 fb38 	bl	80018d0 <print_msg>
        }


        // Blink LED to check if callback is still running
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001260:	2180      	movs	r1, #128	@ 0x80
 8001262:	4816      	ldr	r0, [pc, #88]	@ (80012bc <HAL_UART_RxCpltCallback+0x144>)
 8001264:	f001 fd1d 	bl	8002ca2 <HAL_GPIO_TogglePin>

        // Clear buffer
        memset(received_buffer, 0, sizeof(received_buffer));
 8001268:	2220      	movs	r2, #32
 800126a:	2100      	movs	r1, #0
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <HAL_UART_RxCpltCallback+0x128>)
 800126e:	f006 fb41 	bl	80078f4 <memset>

        // Restart UART reception
        HAL_StatusTypeDef status = HAL_UART_Receive_IT(&huart2, (uint8_t*)received_buffer, 4);
 8001272:	2204      	movs	r2, #4
 8001274:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <HAL_UART_RxCpltCallback+0x128>)
 8001276:	4808      	ldr	r0, [pc, #32]	@ (8001298 <HAL_UART_RxCpltCallback+0x120>)
 8001278:	f004 ffff 	bl	800627a <HAL_UART_Receive_IT>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (status != HAL_OK) {
 8001282:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_UART_RxCpltCallback+0x118>
            print_msg("UART RX restart failed!\r\n");
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <HAL_UART_RxCpltCallback+0x148>)
 800128c:	f000 fb20 	bl	80018d0 <print_msg>
        }
    }
}
 8001290:	bf00      	nop
 8001292:	3738      	adds	r7, #56	@ 0x38
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000174 	.word	0x20000174
 800129c:	08008258 	.word	0x08008258
 80012a0:	20000708 	.word	0x20000708
 80012a4:	08008264 	.word	0x08008264
 80012a8:	10624dd3 	.word	0x10624dd3
 80012ac:	2000072c 	.word	0x2000072c
 80012b0:	20000728 	.word	0x20000728
 80012b4:	08008268 	.word	0x08008268
 80012b8:	08008278 	.word	0x08008278
 80012bc:	40020400 	.word	0x40020400
 80012c0:	08008290 	.word	0x08008290

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	@ 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2234      	movs	r2, #52	@ 0x34
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 fb0e 	bl	80078f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <SystemClock_Config+0xd0>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <SystemClock_Config+0xd0>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f8:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <SystemClock_Config+0xd0>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <SystemClock_Config+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001310:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <SystemClock_Config+0xd4>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <SystemClock_Config+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001328:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800132c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001332:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001336:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800133c:	2348      	movs	r3, #72	@ 0x48
 800133e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001344:	2303      	movs	r3, #3
 8001346:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fd8f 	bl	8004e74 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800135c:	f000 facc 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001370:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f002 ff05 	bl	800418c <HAL_RCC_ClockConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001388:	f000 fab6 	bl	80018f8 <Error_Handler>
  }
}
 800138c:	bf00      	nop
 800138e:	3750      	adds	r7, #80	@ 0x50
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013b0:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <MX_ADC3_Init+0x9c>)
 80013b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013dc:	4a17      	ldr	r2, [pc, #92]	@ (800143c <MX_ADC3_Init+0xa0>)
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013fa:	480e      	ldr	r0, [pc, #56]	@ (8001434 <MX_ADC3_Init+0x98>)
 80013fc:	f000 fe1e 	bl	800203c <HAL_ADC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 fa77 	bl	80018f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800140a:	230f      	movs	r3, #15
 800140c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	@ (8001434 <MX_ADC3_Init+0x98>)
 800141c:	f000 fe52 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001426:	f000 fa67 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000007c 	.word	0x2000007c
 8001438:	40012200 	.word	0x40012200
 800143c:	0f000001 	.word	0x0f000001

08001440 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_DAC_Init+0x4c>)
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <MX_DAC_Init+0x50>)
 8001452:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001454:	480d      	ldr	r0, [pc, #52]	@ (800148c <MX_DAC_Init+0x4c>)
 8001456:	f001 f974 	bl	8002742 <HAL_DAC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001460:	f000 fa4a 	bl	80018f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	@ (800148c <MX_DAC_Init+0x4c>)
 8001474:	f001 f987 	bl	8002786 <HAL_DAC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800147e:	f000 fa3b 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000c4 	.word	0x200000c4
 8001490:	40007400 	.word	0x40007400

08001494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f001 fc25 	bl	8002d20 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 fa0c 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000d8 	.word	0x200000d8
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	@ 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 800152a:	f240 3283 	movw	r2, #899	@ 0x383
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001538:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 800154c:	f003 ff30 	bl	80053b0 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001556:	f000 f9cf 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001564:	4619      	mov	r1, r3
 8001566:	481c      	ldr	r0, [pc, #112]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001568:	f004 f954 	bl	8005814 <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001572:	f000 f9c1 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001576:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001578:	f003 ff69 	bl	800544e <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001582:	f000 f9b9 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	4619      	mov	r1, r3
 8001594:	4810      	ldr	r0, [pc, #64]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001596:	f004 fd15 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015a0:	f000 f9aa 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	@ 0x60
 80015a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	220c      	movs	r2, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 80015bc:	f004 f868 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015c6:	f000 f997 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ca:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 80015cc:	f000 fab2 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	@ 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000012c 	.word	0x2000012c

080015dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f004 fd52 	bl	80060bc <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f96b 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000174 	.word	0x20000174
 800162c:	40004400 	.word	0x40004400

08001630 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <MX_USART3_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 800163c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001640:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_USART3_UART_Init+0x4c>)
 8001668:	f004 fd28 	bl	80060bc <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f000 f941 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001b8 	.word	0x200001b8
 8001680:	40004800 	.word	0x40004800

08001684 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800168e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001692:	2206      	movs	r2, #6
 8001694:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001698:	2202      	movs	r2, #2
 800169a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016bc:	2201      	movs	r2, #1
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c8:	f002 fc17 	bl	8003efa <HAL_PCD_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016d2:	f000 f911 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001fc 	.word	0x200001fc

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	4b70      	ldr	r3, [pc, #448]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a6f      	ldr	r2, [pc, #444]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b6d      	ldr	r3, [pc, #436]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	4b69      	ldr	r3, [pc, #420]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a68      	ldr	r2, [pc, #416]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b66      	ldr	r3, [pc, #408]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a61      	ldr	r2, [pc, #388]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b5f      	ldr	r3, [pc, #380]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b5b      	ldr	r3, [pc, #364]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a5a      	ldr	r2, [pc, #360]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b58      	ldr	r3, [pc, #352]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a53      	ldr	r2, [pc, #332]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a45      	ldr	r2, [pc, #276]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 80017a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b43      	ldr	r3, [pc, #268]	@ (80018bc <MX_GPIO_Init+0x1dc>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80017c0:	483f      	ldr	r0, [pc, #252]	@ (80018c0 <MX_GPIO_Init+0x1e0>)
 80017c2:	f001 fa55 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2140      	movs	r1, #64	@ 0x40
 80017ca:	483e      	ldr	r0, [pc, #248]	@ (80018c4 <MX_GPIO_Init+0x1e4>)
 80017cc:	f001 fa50 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80017d6:	483c      	ldr	r0, [pc, #240]	@ (80018c8 <MX_GPIO_Init+0x1e8>)
 80017d8:	f001 fa4a 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4835      	ldr	r0, [pc, #212]	@ (80018c8 <MX_GPIO_Init+0x1e8>)
 80017f4:	f001 f8a8 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017f8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	482b      	ldr	r0, [pc, #172]	@ (80018c0 <MX_GPIO_Init+0x1e0>)
 8001812:	f001 f899 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001816:	2340      	movs	r3, #64	@ 0x40
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4825      	ldr	r0, [pc, #148]	@ (80018c4 <MX_GPIO_Init+0x1e4>)
 800182e:	f001 f88b 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	481f      	ldr	r0, [pc, #124]	@ (80018c4 <MX_GPIO_Init+0x1e4>)
 8001846:	f001 f87f 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 800184a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4819      	ldr	r0, [pc, #100]	@ (80018c8 <MX_GPIO_Init+0x1e8>)
 8001864:	f001 f870 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL3_Pin;
 8001868:	2390      	movs	r3, #144	@ 0x90
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001872:	2302      	movs	r3, #2
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4813      	ldr	r0, [pc, #76]	@ (80018cc <MX_GPIO_Init+0x1ec>)
 800187e:	f001 f863 	bl	8002948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	200a      	movs	r0, #10
 8001888:	f000 ff25 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800188c:	200a      	movs	r0, #10
 800188e:	f000 ff3e 	bl	800270e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2017      	movs	r0, #23
 8001898:	f000 ff1d 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800189c:	2017      	movs	r0, #23
 800189e:	f000 ff36 	bl	800270e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2028      	movs	r0, #40	@ 0x28
 80018a8:	f000 ff15 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ac:	2028      	movs	r0, #40	@ 0x28
 80018ae:	f000 ff2e 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3730      	adds	r7, #48	@ 0x30
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <print_msg>:

/* USER CODE BEGIN 4 */
void print_msg(char * msg) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7fe fc99 	bl	8000210 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	2364      	movs	r3, #100	@ 0x64
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <print_msg+0x24>)
 80018e8:	f004 fc35 	bl	8006156 <HAL_UART_Transmit>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200001b8 	.word	0x200001b8

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <Error_Handler+0x8>

08001904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <HAL_MspInit+0x4c>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_MspInit+0x4c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <HAL_ADC_MspInit+0x7c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d127      	bne.n	80019c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_ADC_MspInit+0x80>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <HAL_ADC_MspInit+0x80>)
 8001980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_ADC_MspInit+0x80>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_ADC_MspInit+0x80>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_ADC_MspInit+0x80>)
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_ADC_MspInit+0x80>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ae:	2320      	movs	r3, #32
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <HAL_ADC_MspInit+0x84>)
 80019c2:	f000 ffc1 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012200 	.word	0x40012200
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40021400 	.word	0x40021400

080019dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a17      	ldr	r2, [pc, #92]	@ (8001a58 <HAL_DAC_MspInit+0x7c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d127      	bne.n	8001a4e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_DAC_MspInit+0x80>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a15      	ldr	r2, [pc, #84]	@ (8001a5c <HAL_DAC_MspInit+0x80>)
 8001a08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_DAC_MspInit+0x80>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_DAC_MspInit+0x80>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <HAL_DAC_MspInit+0x80>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_DAC_MspInit+0x80>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a36:	2310      	movs	r3, #16
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_DAC_MspInit+0x84>)
 8001a4a:	f000 ff7d 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40007400 	.word	0x40007400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <HAL_I2C_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a17      	ldr	r2, [pc, #92]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001aa2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <HAL_I2C_MspInit+0x8c>)
 8001ac0:	f000 ff42 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400

08001af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b04:	d10d      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_TIM_Base_MspInit+0x3c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_TIM_Base_MspInit+0x3c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_TIM_Base_MspInit+0x3c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b54:	d11d      	bne.n	8001b92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_TIM_MspPostInit+0x68>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_TIM_MspPostInit+0x68>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_TIM_MspPostInit+0x68>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b72:	2308      	movs	r3, #8
 8001b74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <HAL_TIM_MspPostInit+0x6c>)
 8001b8e:	f000 fedb 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	@ 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a36      	ldr	r2, [pc, #216]	@ (8001c9c <HAL_UART_MspInit+0xf8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d134      	bne.n	8001c30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a34      	ldr	r2, [pc, #208]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bfe:	2360      	movs	r3, #96	@ 0x60
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4822      	ldr	r0, [pc, #136]	@ (8001ca4 <HAL_UART_MspInit+0x100>)
 8001c1a:	f000 fe95 	bl	8002948 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2026      	movs	r0, #38	@ 0x26
 8001c24:	f000 fd57 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c28:	2026      	movs	r0, #38	@ 0x26
 8001c2a:	f000 fd70 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2e:	e031      	b.n	8001c94 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <HAL_UART_MspInit+0x104>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12c      	bne.n	8001c94 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_UART_MspInit+0xfc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c84:	2307      	movs	r3, #7
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <HAL_UART_MspInit+0x100>)
 8001c90:	f000 fe5a 	bl	8002948 <HAL_GPIO_Init>
}
 8001c94:	bf00      	nop
 8001c96:	3730      	adds	r7, #48	@ 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40004800 	.word	0x40004800

08001cac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0a0      	sub	sp, #128	@ 0x80
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	225c      	movs	r2, #92	@ 0x5c
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f005 fe11 	bl	80078f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cda:	d14e      	bne.n	8001d7a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 fb68 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001cf6:	f7ff fdff 	bl	80018f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a20      	ldr	r2, [pc, #128]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d16:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d28:	230a      	movs	r3, #10
 8001d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d30:	4619      	mov	r1, r3
 8001d32:	4815      	ldr	r0, [pc, #84]	@ (8001d88 <HAL_PCD_MspInit+0xdc>)
 8001d34:	f000 fe08 	bl	8002948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480e      	ldr	r0, [pc, #56]	@ (8001d88 <HAL_PCD_MspInit+0xdc>)
 8001d4e:	f000 fdfb 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d56:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d5c:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a07      	ldr	r2, [pc, #28]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_PCD_MspInit+0xd8>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3780      	adds	r7, #128	@ 0x80
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <NMI_Handler+0x4>

08001d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <MemManage_Handler+0x4>

08001da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de2:	f000 f8e7 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}

08001dea <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001dee:	2010      	movs	r0, #16
 8001df0:	f000 ff72 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8001dfc:	2080      	movs	r0, #128	@ 0x80
 8001dfe:	f000 ff6b 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <USART2_IRQHandler+0x10>)
 8001e0e:	f004 fa65 	bl	80062dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000174 	.word	0x20000174

08001e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001e20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e24:	f000 ff58 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f005 fd52 	bl	8007904 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20020000 	.word	0x20020000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	20000730 	.word	0x20000730
 8001e94:	20000880 	.word	0x20000880

08001e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <SystemInit+0x20>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <SystemInit+0x20>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec0:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec2:	490e      	ldr	r1, [pc, #56]	@ (8001efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8001f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ee6:	f7ff ffd7 	bl	8001e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eea:	f005 fd11 	bl	8007910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eee:	f7ff f8c3 	bl	8001078 <main>
  bx  lr    
 8001ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f00:	08008408 	.word	0x08008408
  ldr r2, =_sbss
 8001f04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f08:	20000880 	.word	0x20000880

08001f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <HAL_Init+0x40>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_Init+0x40>)
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <HAL_Init+0x40>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f000 fbc1 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f808 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f44:	f7ff fcde 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023c00 	.word	0x40023c00

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_InitTick+0x54>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_InitTick+0x58>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fbd9 	bl	800272a <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00e      	b.n	8001fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0f      	cmp	r3, #15
 8001f86:	d80a      	bhi.n	8001f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f90:	f000 fba1 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4a06      	ldr	r2, [pc, #24]	@ (8001fb0 <HAL_InitTick+0x5c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	2000000c 	.word	0x2000000c
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000734 	.word	0x20000734

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000734 	.word	0x20000734

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e033      	b.n	80020ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fc7a 	bl	8001954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002082:	f023 0302 	bic.w	r3, r3, #2
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f94a 	bl	8002328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80020aa:	e001      	b.n	80020b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1c>
 80020dc:	2302      	movs	r3, #2
 80020de:	e113      	b.n	8002308 <HAL_ADC_ConfigChannel+0x244>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d925      	bls.n	800213c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68d9      	ldr	r1, [r3, #12]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3b1e      	subs	r3, #30
 8002106:	2207      	movs	r2, #7
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	4603      	mov	r3, r0
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4403      	add	r3, r0
 800212e:	3b1e      	subs	r3, #30
 8002130:	409a      	lsls	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e022      	b.n	8002182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	2207      	movs	r2, #7
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	400a      	ands	r2, r1
 800215e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6919      	ldr	r1, [r3, #16]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	4603      	mov	r3, r0
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4403      	add	r3, r0
 8002178:	409a      	lsls	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b06      	cmp	r3, #6
 8002188:	d824      	bhi.n	80021d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b05      	subs	r3, #5
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b05      	subs	r3, #5
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d2:	e04c      	b.n	800226e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d824      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b23      	subs	r3, #35	@ 0x23
 80021ee:	221f      	movs	r2, #31
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43da      	mvns	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	400a      	ands	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b23      	subs	r3, #35	@ 0x23
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
 8002224:	e023      	b.n	800226e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b41      	subs	r3, #65	@ 0x41
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b41      	subs	r3, #65	@ 0x41
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800226e:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <HAL_ADC_ConfigChannel+0x250>)
 8002270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a28      	ldr	r2, [pc, #160]	@ (8002318 <HAL_ADC_ConfigChannel+0x254>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10f      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1d8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d10b      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_ADC_ConfigChannel+0x254>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12b      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x23a>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <HAL_ADC_ConfigChannel+0x258>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x1f4>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b11      	cmp	r3, #17
 80022b6:	d122      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a11      	ldr	r2, [pc, #68]	@ (800231c <HAL_ADC_ConfigChannel+0x258>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_ADC_ConfigChannel+0x25c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_ADC_ConfigChannel+0x260>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0c9a      	lsrs	r2, r3, #18
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f9      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40012300 	.word	0x40012300
 8002318:	40012000 	.word	0x40012000
 800231c:	10000012 	.word	0x10000012
 8002320:	20000004 	.word	0x20000004
 8002324:	431bde83 	.word	0x431bde83

08002328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002330:	4b79      	ldr	r3, [pc, #484]	@ (8002518 <ADC_Init+0x1f0>)
 8002332:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800235c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	021a      	lsls	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	4a58      	ldr	r2, [pc, #352]	@ (800251c <ADC_Init+0x1f4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e00f      	b.n	8002426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0202 	bic.w	r2, r2, #2
 8002434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
 8002440:	005a      	lsls	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	3b01      	subs	r3, #1
 8002480:	035a      	lsls	r2, r3, #13
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	e007      	b.n	800249c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800249a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	051a      	lsls	r2, r3, #20
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024de:	025a      	lsls	r2, r3, #9
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	029a      	lsls	r2, r3, #10
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40012300 	.word	0x40012300
 800251c:	0f000001 	.word	0x0f000001

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	@ (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	@ (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e014      	b.n	800277e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	791b      	ldrb	r3, [r3, #4]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff f939 	bl	80019dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002786:	b480      	push	{r7}
 8002788:	b087      	sub	sp, #28
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	795b      	ldrb	r3, [r3, #5]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_DAC_ConfigChannel+0x18>
 800279a:	2302      	movs	r3, #2
 800279c:	e03c      	b.n	8002818 <HAL_DAC_ConfigChannel+0x92>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2202      	movs	r2, #2
 80027a8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	22c0      	movs	r2, #192	@ 0xc0
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002832:	f7ff fbd3 	bl	8001fdc <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e052      	b.n	80028fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_Abort+0x62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a6:	e013      	b.n	80028d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a8:	f7ff fb98 	bl	8001fdc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d90c      	bls.n	80028d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2203      	movs	r2, #3
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e015      	b.n	80028fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e4      	bne.n	80028a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	223f      	movs	r2, #63	@ 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d004      	beq.n	8002922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	@ 0x80
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00c      	b.n	800293c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2205      	movs	r2, #5
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	@ 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e165      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8154 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d005      	beq.n	800299a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	2b02      	cmp	r3, #2
 8002998:	d130      	bne.n	80029fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ae 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <HAL_GPIO_Init+0x300>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c48 <HAL_GPIO_Init+0x300>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ade:	4b5a      	ldr	r3, [pc, #360]	@ (8002c48 <HAL_GPIO_Init+0x300>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4f      	ldr	r2, [pc, #316]	@ (8002c50 <HAL_GPIO_Init+0x308>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x21a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4e      	ldr	r2, [pc, #312]	@ (8002c54 <HAL_GPIO_Init+0x30c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x216>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4d      	ldr	r2, [pc, #308]	@ (8002c58 <HAL_GPIO_Init+0x310>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x212>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4c      	ldr	r2, [pc, #304]	@ (8002c5c <HAL_GPIO_Init+0x314>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x20e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	@ (8002c60 <HAL_GPIO_Init+0x318>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x20a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	@ (8002c64 <HAL_GPIO_Init+0x31c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a49      	ldr	r2, [pc, #292]	@ (8002c68 <HAL_GPIO_Init+0x320>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x202>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	@ (8002c4c <HAL_GPIO_Init+0x304>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b82:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba6:	4a31      	ldr	r2, [pc, #196]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bac:	4b2f      	ldr	r3, [pc, #188]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c24:	4a11      	ldr	r2, [pc, #68]	@ (8002c6c <HAL_GPIO_Init+0x324>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae96 	bls.w	8002964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f806 	bl	8002d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e12b      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe fe8c 	bl	8001a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d84:	f001 faf4 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a81      	ldr	r2, [pc, #516]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d807      	bhi.n	8002da4 <HAL_I2C_Init+0x84>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a80      	ldr	r2, [pc, #512]	@ (8002f98 <HAL_I2C_Init+0x278>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e006      	b.n	8002db2 <HAL_I2C_Init+0x92>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a7d      	ldr	r2, [pc, #500]	@ (8002f9c <HAL_I2C_Init+0x27c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e7      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	@ (8002fa0 <HAL_I2C_Init+0x280>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <HAL_I2C_Init+0xd4>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	3301      	adds	r3, #1
 8002df2:	e009      	b.n	8002e08 <HAL_I2C_Init+0xe8>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a69      	ldr	r2, [pc, #420]	@ (8002fa4 <HAL_I2C_Init+0x284>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	3301      	adds	r3, #1
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	495c      	ldr	r1, [pc, #368]	@ (8002f94 <HAL_I2C_Init+0x274>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d819      	bhi.n	8002e5c <HAL_I2C_Init+0x13c>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_I2C_Init+0x138>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e59      	subs	r1, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	e051      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e04f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_I2C_Init+0x168>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Init+0x18e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x196>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <HAL_I2C_Init+0x1bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e58      	subs	r0, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	440b      	add	r3, r1
 8002ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eda:	e00f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6809      	ldr	r1, [r1, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6911      	ldr	r1, [r2, #16]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	000186a0 	.word	0x000186a0
 8002f98:	001e847f 	.word	0x001e847f
 8002f9c:	003d08ff 	.word	0x003d08ff
 8002fa0:	431bde83 	.word	0x431bde83
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	817b      	strh	r3, [r7, #10]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	813b      	strh	r3, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc2:	f7ff f80b 	bl	8001fdc <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	f040 80d9 	bne.w	8003188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2319      	movs	r3, #25
 8002fdc:	2201      	movs	r2, #1
 8002fde:	496d      	ldr	r1, [pc, #436]	@ (8003194 <HAL_I2C_Mem_Write+0x1ec>)
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fdad 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
 8002fee:	e0cc      	b.n	800318a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Mem_Write+0x56>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0c5      	b.n	800318a <HAL_I2C_Mem_Write+0x1e2>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d007      	beq.n	8003024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2221      	movs	r2, #33	@ 0x21
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	@ 0x40
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a4d      	ldr	r2, [pc, #308]	@ (8003198 <HAL_I2C_Mem_Write+0x1f0>)
 8003064:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003066:	88f8      	ldrh	r0, [r7, #6]
 8003068:	893a      	ldrh	r2, [r7, #8]
 800306a:	8979      	ldrh	r1, [r7, #10]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4603      	mov	r3, r0
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fbe4 	bl	8003844 <I2C_RequestMemoryWrite>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d052      	beq.n	8003128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e081      	b.n	800318a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fe2e 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	2b04      	cmp	r3, #4
 800309c:	d107      	bne.n	80030ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06b      	b.n	800318a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d11b      	bne.n	8003128 <HAL_I2C_Mem_Write+0x180>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d017      	beq.n	8003128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1aa      	bne.n	8003086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fe1a 	bl	8003d6e <I2C_WaitOnBTFFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	2b04      	cmp	r3, #4
 8003146:	d107      	bne.n	8003158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e016      	b.n	800318a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	00100002 	.word	0x00100002
 8003198:	ffff0000 	.word	0xffff0000

0800319c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	@ 0x30
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	460b      	mov	r3, r1
 80031b0:	813b      	strh	r3, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031b6:	f7fe ff11 	bl	8001fdc <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	f040 8208 	bne.w	80035da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2319      	movs	r3, #25
 80031d0:	2201      	movs	r2, #1
 80031d2:	497b      	ldr	r1, [pc, #492]	@ (80033c0 <HAL_I2C_Mem_Read+0x224>)
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fcb3 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
 80031e2:	e1fb      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2C_Mem_Read+0x56>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e1f4      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d007      	beq.n	8003218 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2222      	movs	r2, #34	@ 0x22
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2240      	movs	r2, #64	@ 0x40
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a5b      	ldr	r2, [pc, #364]	@ (80033c4 <HAL_I2C_Mem_Read+0x228>)
 8003258:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325a:	88f8      	ldrh	r0, [r7, #6]
 800325c:	893a      	ldrh	r2, [r7, #8]
 800325e:	8979      	ldrh	r1, [r7, #10]
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4603      	mov	r3, r0
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fb80 	bl	8003970 <I2C_RequestMemoryRead>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1b0      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d113      	bne.n	80032aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e184      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d11b      	bne.n	80032ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e164      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d11b      	bne.n	800332a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003300:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	e144      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003340:	e138      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	2b03      	cmp	r3, #3
 8003348:	f200 80f1 	bhi.w	800352e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	2b01      	cmp	r3, #1
 8003352:	d123      	bne.n	800339c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003356:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fd49 	bl	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e139      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800339a:	e10b      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d14e      	bne.n	8003442 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033aa:	2200      	movs	r2, #0
 80033ac:	4906      	ldr	r1, [pc, #24]	@ (80033c8 <HAL_I2C_Mem_Read+0x22c>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fbc6 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e10e      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
 80033be:	bf00      	nop
 80033c0:	00100002 	.word	0x00100002
 80033c4:	ffff0000 	.word	0xffff0000
 80033c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003440:	e0b8      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	2200      	movs	r2, #0
 800344a:	4966      	ldr	r1, [pc, #408]	@ (80035e4 <HAL_I2C_Mem_Read+0x448>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fb77 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0bf      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	2200      	movs	r2, #0
 80034a6:	494f      	ldr	r1, [pc, #316]	@ (80035e4 <HAL_I2C_Mem_Read+0x448>)
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fb49 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e091      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800352c:	e042      	b.n	80035b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fc5c 	bl	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e04c      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d118      	bne.n	80035b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f aec2 	bne.w	8003342 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	@ 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00010004 	.word	0x00010004

080035e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7fe fcf0 	bl	8001fdc <HAL_GetTick>
 80035fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b20      	cmp	r3, #32
 800360c:	f040 8111 	bne.w	8003832 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2319      	movs	r3, #25
 8003616:	2201      	movs	r2, #1
 8003618:	4988      	ldr	r1, [pc, #544]	@ (800383c <HAL_I2C_IsDeviceReady+0x254>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa90 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	e104      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_I2C_IsDeviceReady+0x50>
 8003634:	2302      	movs	r3, #2
 8003636:	e0fd      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d007      	beq.n	800365e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2224      	movs	r2, #36	@ 0x24
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a70      	ldr	r2, [pc, #448]	@ (8003840 <HAL_I2C_IsDeviceReady+0x258>)
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003690:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fa4e 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b8:	d103      	bne.n	80036c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b6      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fe fc81 	bl	8001fdc <HAL_GetTick>
 80036da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800370a:	e025      	b.n	8003758 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800370c:	f7fe fc66 	bl	8001fdc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <HAL_I2C_IsDeviceReady+0x13a>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	22a0      	movs	r2, #160	@ 0xa0
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2ba0      	cmp	r3, #160	@ 0xa0
 8003762:	d005      	beq.n	8003770 <HAL_I2C_IsDeviceReady+0x188>
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <HAL_I2C_IsDeviceReady+0x188>
 800376a:	7dbb      	ldrb	r3, [r7, #22]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0cd      	beq.n	800370c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d129      	bne.n	80037da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003794:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2319      	movs	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	4921      	ldr	r1, [pc, #132]	@ (800383c <HAL_I2C_IsDeviceReady+0x254>)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f9c2 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e036      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e02c      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2319      	movs	r3, #25
 80037fa:	2201      	movs	r2, #1
 80037fc:	490f      	ldr	r1, [pc, #60]	@ (800383c <HAL_I2C_IsDeviceReady+0x254>)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f99e 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e012      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3301      	adds	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	f4ff af32 	bcc.w	8003682 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	00100002 	.word	0x00100002
 8003840:	ffff0000 	.word	0xffff0000

08003844 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	460b      	mov	r3, r1
 8003858:	813b      	strh	r3, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800386c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2200      	movs	r2, #0
 8003876:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f960 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003894:	d103      	bne.n	800389e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e05f      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	492d      	ldr	r1, [pc, #180]	@ (800396c <I2C_RequestMemoryWrite+0x128>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f998 	bl	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04c      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa02 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02b      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	e021      	b.n	8003960 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29b      	uxth	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f9dc 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e005      	b.n	8003962 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	00010002 	.word	0x00010002

08003970 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	460b      	mov	r3, r1
 8003984:	813b      	strh	r3, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003998:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f8c2 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d0:	d103      	bne.n	80039da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0aa      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	4952      	ldr	r1, [pc, #328]	@ (8003b3c <I2C_RequestMemoryRead+0x1cc>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f8fa 	bl	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e097      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1c:	6a39      	ldr	r1, [r7, #32]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f964 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d107      	bne.n	8003a42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e076      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4c:	893b      	ldrh	r3, [r7, #8]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]
 8003a56:	e021      	b.n	8003a9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a58:	893b      	ldrh	r3, [r7, #8]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a68:	6a39      	ldr	r1, [r7, #32]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f93e 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d107      	bne.n	8003a8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e050      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a92:	893b      	ldrh	r3, [r7, #8]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9e:	6a39      	ldr	r1, [r7, #32]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f923 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d107      	bne.n	8003ac4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e035      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f82b 	bl	8003b40 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afe:	d103      	bne.n	8003b08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e013      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b0c:	897b      	ldrh	r3, [r7, #10]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	4906      	ldr	r1, [pc, #24]	@ (8003b3c <I2C_RequestMemoryRead+0x1cc>)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f863 	bl	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	00010002 	.word	0x00010002

08003b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b50:	e025      	b.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b58:	d021      	beq.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fe fa3f 	bl	8001fdc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d116      	bne.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e023      	b.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10d      	bne.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	e00c      	b.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d0b6      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bfc:	e051      	b.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c0c:	d123      	bne.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f043 0204 	orr.w	r2, r3, #4
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e046      	b.n	8003ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c5c:	d021      	beq.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fe f9bd 	bl	8001fdc <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d116      	bne.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e020      	b.n	8003ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10c      	bne.n	8003cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e00b      	b.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d18d      	bne.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf8:	e02d      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f8ce 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e02d      	b.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d10:	d021      	beq.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7fe f963 	bl	8001fdc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d116      	bne.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e007      	b.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d60:	2b80      	cmp	r3, #128	@ 0x80
 8003d62:	d1ca      	bne.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d7a:	e02d      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f88d 	bl	8003e9c <I2C_IsAcknowledgeFailed>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e02d      	b.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d92:	d021      	beq.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7fe f922 	bl	8001fdc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d116      	bne.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e007      	b.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d1ca      	bne.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dfc:	e042      	b.n	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d119      	bne.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0210 	mvn.w	r2, #16
 8003e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e029      	b.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e40:	f7fe f8cc 	bl	8001fdc <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d1b5      	bne.n	8003dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb2:	d11b      	bne.n	8003eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efc:	b08f      	sub	sp, #60	@ 0x3c
 8003efe:	af0a      	add	r7, sp, #40	@ 0x28
 8003f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e116      	b.n	800413a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd fec0 	bl	8001cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 f98f 	bl	800726e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	687e      	ldr	r6, [r7, #4]
 8003f58:	466d      	mov	r5, sp
 8003f5a:	f106 0410 	add.w	r4, r6, #16
 8003f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f6e:	1d33      	adds	r3, r6, #4
 8003f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	f003 f91a 	bl	80071ac <USB_CoreInit>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e0d7      	b.n	800413a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f003 f97d 	bl	8007290 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	e04a      	b.n	8004032 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	333d      	adds	r3, #61	@ 0x3d
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	333c      	adds	r3, #60	@ 0x3c
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	b298      	uxth	r0, r3
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3344      	adds	r3, #68	@ 0x44
 8003fd8:	4602      	mov	r2, r0
 8003fda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3340      	adds	r3, #64	@ 0x40
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3348      	adds	r3, #72	@ 0x48
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	334c      	adds	r3, #76	@ 0x4c
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3354      	adds	r3, #84	@ 0x54
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	3301      	adds	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d3af      	bcc.n	8003f9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e044      	b.n	80040cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	3301      	adds	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3b5      	bcc.n	8004042 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	687e      	ldr	r6, [r7, #4]
 80040de:	466d      	mov	r5, sp
 80040e0:	f106 0410 	add.w	r4, r6, #16
 80040e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80040f4:	1d33      	adds	r3, r6, #4
 80040f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040f8:	6838      	ldr	r0, [r7, #0]
 80040fa:	f003 f915 	bl	8007328 <USB_DevInit>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e014      	b.n	800413a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d102      	bne.n	800412e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f80a 	bl	8004142 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f003 fad3 	bl	80076de <USB_DevDisconnect>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004142 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004174:	f043 0303 	orr.w	r3, r3, #3
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0cc      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b68      	ldr	r3, [pc, #416]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d90c      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b65      	ldr	r3, [pc, #404]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b63      	ldr	r3, [pc, #396]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b8      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e0:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a58      	ldr	r2, [pc, #352]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f8:	4b53      	ldr	r3, [pc, #332]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a52      	ldr	r2, [pc, #328]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004204:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	494d      	ldr	r1, [pc, #308]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d044      	beq.n	80042ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d119      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e07f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	2b03      	cmp	r3, #3
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	4b3f      	ldr	r3, [pc, #252]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e06f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e067      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426a:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 0203 	bic.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4934      	ldr	r1, [pc, #208]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800427c:	f7fd feae 	bl	8001fdc <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fd feaa 	bl	8001fdc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 020c 	and.w	r2, r3, #12
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1eb      	bne.n	8004284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d20c      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e032      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e0:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4916      	ldr	r1, [pc, #88]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fe:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	490e      	ldr	r1, [pc, #56]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004312:	f000 fb7f 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004316:	4602      	mov	r2, r0
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	490a      	ldr	r1, [pc, #40]	@ (800434c <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	5ccb      	ldrb	r3, [r1, r3]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800432e:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd fe0e 	bl	8001f54 <HAL_InitTick>

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023c00 	.word	0x40023c00
 8004348:	40023800 	.word	0x40023800
 800434c:	080082ac 	.word	0x080082ac
 8004350:	20000004 	.word	0x20000004
 8004354:	20000008 	.word	0x20000008

08004358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	@ (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000004 	.word	0x20000004

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004374:	f7ff fff0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0a9b      	lsrs	r3, r3, #10
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	@ (8004394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	080082bc 	.word	0x080082bc

08004398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800439c:	f7ff ffdc 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0b5b      	lsrs	r3, r3, #13
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4903      	ldr	r1, [pc, #12]	@ (80043bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40023800 	.word	0x40023800
 80043bc:	080082bc 	.word	0x080082bc

080043c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	@ 0x30
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80043f8:	4b6f      	ldr	r3, [pc, #444]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043fe:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	496c      	ldr	r1, [pc, #432]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004416:	2301      	movs	r3, #1
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004426:	4b64      	ldr	r3, [pc, #400]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800442c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	4960      	ldr	r1, [pc, #384]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004444:	2301      	movs	r3, #1
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004454:	4b58      	ldr	r3, [pc, #352]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800445a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	4955      	ldr	r1, [pc, #340]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004472:	d101      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004480:	2301      	movs	r3, #1
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004490:	4b49      	ldr	r3, [pc, #292]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004496:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449e:	4946      	ldr	r1, [pc, #280]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ae:	d101      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80044bc:	2301      	movs	r3, #1
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 808a 	beq.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	4b39      	ldr	r3, [pc, #228]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	4a38      	ldr	r2, [pc, #224]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044de:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ea:	4b34      	ldr	r3, [pc, #208]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fd71 	bl	8001fdc <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fd fd6d 	bl	8001fdc <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e278      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004510:	4b2a      	ldr	r3, [pc, #168]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451c:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004524:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	429a      	cmp	r2, r3
 8004538:	d028      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453a:	4b1f      	ldr	r3, [pc, #124]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004542:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004544:	4b1e      	ldr	r3, [pc, #120]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454a:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004550:	4a19      	ldr	r2, [pc, #100]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004556:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d114      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004562:	f7fd fd3b 	bl	8001fdc <HAL_GetTick>
 8004566:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fd37 	bl	8001fdc <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e240      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004594:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004598:	d114      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800459a:	4b07      	ldr	r3, [pc, #28]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80045aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ae:	4902      	ldr	r1, [pc, #8]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
 80045b4:	e00c      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40007000 	.word	0x40007000
 80045c0:	42470e40 	.word	0x42470e40
 80045c4:	4b4a      	ldr	r3, [pc, #296]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a49      	ldr	r2, [pc, #292]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045ce:	6093      	str	r3, [r2, #8]
 80045d0:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045dc:	4944      	ldr	r1, [pc, #272]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80045f4:	4b3f      	ldr	r3, [pc, #252]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80045f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004604:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004612:	4937      	ldr	r1, [pc, #220]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004626:	4b32      	ldr	r3, [pc, #200]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800462c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004634:	492e      	ldr	r1, [pc, #184]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d011      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004648:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800464e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	4926      	ldr	r1, [pc, #152]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004666:	d101      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004668:	2301      	movs	r3, #1
 800466a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	491a      	ldr	r1, [pc, #104]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800469a:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a8:	4911      	ldr	r1, [pc, #68]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b8:	d101      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80046ba:	2301      	movs	r3, #1
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d005      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046cc:	f040 80ff 	bne.w	80048ce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d6:	f7fd fc81 	bl	8001fdc <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046dc:	e00e      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046de:	f7fd fc7d 	bl	8001fdc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d907      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e188      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	424711e0 	.word	0x424711e0
 80046f8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fc:	4b7e      	ldr	r3, [pc, #504]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ea      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004724:	2b00      	cmp	r3, #0
 8004726:	d028      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d124      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004730:	4b71      	ldr	r3, [pc, #452]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	3301      	adds	r3, #1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004742:	4b6d      	ldr	r3, [pc, #436]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004748:	0e1b      	lsrs	r3, r3, #24
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	431a      	orrs	r2, r3
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	431a      	orrs	r2, r3
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	4961      	ldr	r1, [pc, #388]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d004      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004798:	2b00      	cmp	r3, #0
 800479a:	d035      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047a4:	d130      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80047a6:	4b54      	ldr	r3, [pc, #336]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	3301      	adds	r3, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b8:	4b4f      	ldr	r3, [pc, #316]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	019b      	lsls	r3, r3, #6
 80047d0:	431a      	orrs	r2, r3
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	071b      	lsls	r3, r3, #28
 80047e8:	4943      	ldr	r1, [pc, #268]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047f0:	4b41      	ldr	r3, [pc, #260]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047f6:	f023 021f 	bic.w	r2, r3, #31
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	493d      	ldr	r1, [pc, #244]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d029      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800481c:	d124      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800481e:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004830:	4b31      	ldr	r3, [pc, #196]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004836:	0f1b      	lsrs	r3, r3, #28
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	019b      	lsls	r3, r3, #6
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	431a      	orrs	r2, r3
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	431a      	orrs	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	071b      	lsls	r3, r3, #28
 8004860:	4925      	ldr	r1, [pc, #148]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	019b      	lsls	r3, r3, #6
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	3b01      	subs	r3, #1
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	071b      	lsls	r3, r3, #28
 800489a:	4917      	ldr	r1, [pc, #92]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048a2:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a8:	f7fd fb98 	bl	8001fdc <HAL_GetTick>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048b0:	f7fd fb94 	bl	8001fdc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e09f      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	f040 8095 	bne.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048dc:	f7fd fb7e 	bl	8001fdc <HAL_GetTick>
 80048e0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048e2:	e00f      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048e4:	f7fd fb7a 	bl	8001fdc <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d908      	bls.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e085      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470068 	.word	0x42470068
 8004900:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004904:	4b41      	ldr	r3, [pc, #260]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800490c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004910:	d0e8      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02b      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004936:	2b00      	cmp	r3, #0
 8004938:	d127      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800493a:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	3301      	adds	r3, #1
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	431a      	orrs	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	4928      	ldr	r1, [pc, #160]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004970:	4b26      	ldr	r3, [pc, #152]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004976:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	3b01      	subs	r3, #1
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	4922      	ldr	r1, [pc, #136]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01d      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800499e:	d118      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049a0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	0e1b      	lsrs	r3, r3, #24
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	019b      	lsls	r3, r3, #6
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	4910      	ldr	r1, [pc, #64]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d8:	f7fd fb00 	bl	8001fdc <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049e0:	f7fd fafc 	bl	8001fdc <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e007      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f2:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049fe:	d1ef      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3730      	adds	r7, #48	@ 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	42470070 	.word	0x42470070

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b0ae      	sub	sp, #184	@ 0xb8
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3a:	4bcb      	ldr	r3, [pc, #812]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	f200 8206 	bhi.w	8004e54 <HAL_RCC_GetSysClockFreq+0x440>
 8004a48:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004e55 	.word	0x08004e55
 8004a58:	08004e55 	.word	0x08004e55
 8004a5c:	08004e55 	.word	0x08004e55
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004e55 	.word	0x08004e55
 8004a68:	08004e55 	.word	0x08004e55
 8004a6c:	08004e55 	.word	0x08004e55
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004e55 	.word	0x08004e55
 8004a78:	08004e55 	.word	0x08004e55
 8004a7c:	08004e55 	.word	0x08004e55
 8004a80:	08004c85 	.word	0x08004c85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4bb9      	ldr	r3, [pc, #740]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004a8a:	e1e7      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8c:	4bb8      	ldr	r3, [pc, #736]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a92:	e1e3      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a94:	4bb4      	ldr	r3, [pc, #720]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa0:	4bb1      	ldr	r3, [pc, #708]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d071      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4bae      	ldr	r3, [pc, #696]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ab8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	0159      	lsls	r1, r3, #5
 8004ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae4:	0150      	lsls	r0, r2, #5
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4621      	mov	r1, r4
 8004aec:	1a51      	subs	r1, r2, r1
 8004aee:	6439      	str	r1, [r7, #64]	@ 0x40
 8004af0:	4629      	mov	r1, r5
 8004af2:	eb63 0301 	sbc.w	r3, r3, r1
 8004af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b04:	4649      	mov	r1, r9
 8004b06:	018b      	lsls	r3, r1, #6
 8004b08:	4641      	mov	r1, r8
 8004b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b0e:	4641      	mov	r1, r8
 8004b10:	018a      	lsls	r2, r1, #6
 8004b12:	4641      	mov	r1, r8
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b18:	4649      	mov	r1, r9
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4641      	mov	r1, r8
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4622      	mov	r2, r4
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b46:	462b      	mov	r3, r5
 8004b48:	460a      	mov	r2, r1
 8004b4a:	eb42 0303 	adc.w	r3, r2, r3
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	024b      	lsls	r3, r1, #9
 8004b60:	4621      	mov	r1, r4
 8004b62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b66:	4621      	mov	r1, r4
 8004b68:	024a      	lsls	r2, r1, #9
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b80:	f7fb ffbc 	bl	8000afc <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b8e:	e067      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b75      	ldr	r3, [pc, #468]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004baa:	2300      	movs	r3, #0
 8004bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	0159      	lsls	r1, r3, #5
 8004bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc4:	0150      	lsls	r0, r2, #5
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4621      	mov	r1, r4
 8004bcc:	1a51      	subs	r1, r2, r1
 8004bce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004be4:	4649      	mov	r1, r9
 8004be6:	018b      	lsls	r3, r1, #6
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bee:	4641      	mov	r1, r8
 8004bf0:	018a      	lsls	r2, r1, #6
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c12:	4692      	mov	sl, r2
 8004c14:	469b      	mov	fp, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	eb1a 0303 	adds.w	r3, sl, r3
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	462b      	mov	r3, r5
 8004c20:	eb4b 0303 	adc.w	r3, fp, r3
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c32:	4629      	mov	r1, r5
 8004c34:	028b      	lsls	r3, r1, #10
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	028a      	lsls	r2, r1, #10
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c48:	2200      	movs	r2, #0
 8004c4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c52:	f7fb ff53 	bl	8000afc <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c60:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c82:	e0eb      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c84:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c90:	4b35      	ldr	r3, [pc, #212]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d06b      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9c:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cb8:	4622      	mov	r2, r4
 8004cba:	462b      	mov	r3, r5
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	0159      	lsls	r1, r3, #5
 8004cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cca:	0150      	lsls	r0, r2, #5
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	1a51      	subs	r1, r2, r1
 8004cd4:	61b9      	str	r1, [r7, #24]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cea:	4659      	mov	r1, fp
 8004cec:	018b      	lsls	r3, r1, #6
 8004cee:	4651      	mov	r1, sl
 8004cf0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	018a      	lsls	r2, r1, #6
 8004cf8:	4651      	mov	r1, sl
 8004cfa:	ebb2 0801 	subs.w	r8, r2, r1
 8004cfe:	4659      	mov	r1, fp
 8004d00:	eb63 0901 	sbc.w	r9, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d18:	4690      	mov	r8, r2
 8004d1a:	4699      	mov	r9, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	eb18 0303 	adds.w	r3, r8, r3
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	462b      	mov	r3, r5
 8004d26:	eb49 0303 	adc.w	r3, r9, r3
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d38:	4629      	mov	r1, r5
 8004d3a:	024b      	lsls	r3, r1, #9
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d42:	4621      	mov	r1, r4
 8004d44:	024a      	lsls	r2, r1, #9
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d4e:	2200      	movs	r2, #0
 8004d50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d58:	f7fb fed0 	bl	8000afc <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d66:	e065      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x420>
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d74:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4611      	mov	r1, r2
 8004d80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d84:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d86:	2300      	movs	r3, #0
 8004d88:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d8e:	4642      	mov	r2, r8
 8004d90:	464b      	mov	r3, r9
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	0159      	lsls	r1, r3, #5
 8004d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da0:	0150      	lsls	r0, r2, #5
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4641      	mov	r1, r8
 8004da8:	1a51      	subs	r1, r2, r1
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	4649      	mov	r1, r9
 8004dae:	eb63 0301 	sbc.w	r3, r3, r1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	018b      	lsls	r3, r1, #6
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dca:	4651      	mov	r1, sl
 8004dcc:	018a      	lsls	r2, r1, #6
 8004dce:	4651      	mov	r1, sl
 8004dd0:	1a54      	subs	r4, r2, r1
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	eb63 0501 	sbc.w	r5, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	00eb      	lsls	r3, r5, #3
 8004de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de6:	00e2      	lsls	r2, r4, #3
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	18e3      	adds	r3, r4, r3
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	464b      	mov	r3, r9
 8004df4:	eb45 0303 	adc.w	r3, r5, r3
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e06:	4629      	mov	r1, r5
 8004e08:	028b      	lsls	r3, r1, #10
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e10:	4621      	mov	r1, r4
 8004e12:	028a      	lsls	r2, r1, #10
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e26:	f7fb fe69 	bl	8000afc <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4613      	mov	r3, r2
 8004e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e34:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	0f1b      	lsrs	r3, r3, #28
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	37b8      	adds	r7, #184	@ 0xb8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e28d      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8083 	beq.w	8004f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e94:	4b94      	ldr	r3, [pc, #592]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d019      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ea0:	4b91      	ldr	r3, [pc, #580]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004eac:	4b8e      	ldr	r3, [pc, #568]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b8b      	ldr	r3, [pc, #556]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b88      	ldr	r3, [pc, #544]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b84      	ldr	r3, [pc, #528]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x124>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e25a      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x90>
 8004ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7b      	ldr	r2, [pc, #492]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xcc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0xb4>
 8004f0e:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a75      	ldr	r2, [pc, #468]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b73      	ldr	r3, [pc, #460]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a72      	ldr	r2, [pc, #456]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xcc>
 8004f28:	4b6f      	ldr	r3, [pc, #444]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b6c      	ldr	r3, [pc, #432]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6b      	ldr	r2, [pc, #428]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd f848 	bl	8001fdc <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd f844 	bl	8001fdc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e21f      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xdc>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fd f834 	bl	8001fdc <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd f830 	bl	8001fdc <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e20b      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b57      	ldr	r3, [pc, #348]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x104>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d06f      	beq.n	8005086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fa6:	4b50      	ldr	r3, [pc, #320]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d105      	bne.n	8004fca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b47      	ldr	r3, [pc, #284]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b41      	ldr	r3, [pc, #260]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x186>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1d3      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4937      	ldr	r1, [pc, #220]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b34      	ldr	r3, [pc, #208]	@ (80050ec <HAL_RCC_OscConfig+0x278>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc ffdd 	bl	8001fdc <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fc ffd9 	bl	8001fdc <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1b4      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b28      	ldr	r3, [pc, #160]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4925      	ldr	r1, [pc, #148]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <HAL_RCC_OscConfig+0x278>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fc ffbc 	bl	8001fdc <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fc ffb8 	bl	8001fdc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e193      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d036      	beq.n	8005100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <HAL_RCC_OscConfig+0x27c>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc ff9c 	bl	8001fdc <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fc ff98 	bl	8001fdc <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e173      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x234>
 80050c6:	e01b      	b.n	8005100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_RCC_OscConfig+0x27c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7fc ff85 	bl	8001fdc <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e00e      	b.n	80050f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fc ff81 	bl	8001fdc <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d907      	bls.n	80050f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e15c      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
 80050e8:	40023800 	.word	0x40023800
 80050ec:	42470000 	.word	0x42470000
 80050f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ea      	bne.n	80050d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8097 	beq.w	800523c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005112:	4b83      	ldr	r3, [pc, #524]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	4a7e      	ldr	r2, [pc, #504]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512c:	6413      	str	r3, [r2, #64]	@ 0x40
 800512e:	4b7c      	ldr	r3, [pc, #496]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513e:	4b79      	ldr	r3, [pc, #484]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d118      	bne.n	800517c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514a:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a75      	ldr	r2, [pc, #468]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005156:	f7fc ff41 	bl	8001fdc <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7fc ff3d 	bl	8001fdc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e118      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b6c      	ldr	r3, [pc, #432]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x31e>
 8005184:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005188:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x358>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x340>
 800519a:	4b61      	ldr	r3, [pc, #388]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	4a60      	ldr	r2, [pc, #384]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0x358>
 80051b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	4a59      	ldr	r2, [pc, #356]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c0:	4b57      	ldr	r3, [pc, #348]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	4a56      	ldr	r2, [pc, #344]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051c6:	f023 0304 	bic.w	r3, r3, #4
 80051ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc ff02 	bl	8001fdc <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fc fefe 	bl	8001fdc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0d7      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <HAL_RCC_OscConfig+0x368>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fc feec 	bl	8001fdc <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fc fee8 	bl	8001fdc <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0c1      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521e:	4b40      	ldr	r3, [pc, #256]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ee      	bne.n	8005208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80ad 	beq.w	80053a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005246:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d060      	beq.n	8005314 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d145      	bne.n	80052e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b33      	ldr	r3, [pc, #204]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fc febc 	bl	8001fdc <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005268:	f7fc feb8 	bl	8001fdc <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e093      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	491b      	ldr	r1, [pc, #108]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fc fe8d 	bl	8001fdc <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fc fe89 	bl	8001fdc <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e064      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x452>
 80052e4:	e05c      	b.n	80053a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fc fe76 	bl	8001fdc <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fc fe72 	bl	8001fdc <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e04d      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x480>
 8005312:	e045      	b.n	80053a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e040      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
 8005320:	40023800 	.word	0x40023800
 8005324:	40007000 	.word	0x40007000
 8005328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_RCC_OscConfig+0x538>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d030      	beq.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d129      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d122      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005364:	4293      	cmp	r3, r2
 8005366:	d119      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	3b01      	subs	r3, #1
 8005376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d10f      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800

080053b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e041      	b.n	8005446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc fb8c 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fad8 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e041      	b.n	80054e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f839 	bl	80054ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 fa89 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start+0x24>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e022      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d109      	bne.n	800553e <HAL_TIM_PWM_Start+0x3e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e015      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d109      	bne.n	8005558 <HAL_TIM_PWM_Start+0x58>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e008      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e07c      	b.n	800566c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start+0x82>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005580:	e013      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0x92>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005590:	e00b      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a0:	e003      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fce0 	bl	8005f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005674 <HAL_TIM_PWM_Start+0x174>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_PWM_Start+0xcc>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005678 <HAL_TIM_PWM_Start+0x178>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_TIM_PWM_Start+0xd0>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <HAL_TIM_PWM_Start+0xd2>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a22      	ldr	r2, [pc, #136]	@ (8005674 <HAL_TIM_PWM_Start+0x174>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d01d      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <HAL_TIM_PWM_Start+0x17c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1d      	ldr	r2, [pc, #116]	@ (8005680 <HAL_TIM_PWM_Start+0x180>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <HAL_TIM_PWM_Start+0x184>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a16      	ldr	r2, [pc, #88]	@ (8005678 <HAL_TIM_PWM_Start+0x178>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	@ (8005688 <HAL_TIM_PWM_Start+0x188>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIM_PWM_Start+0x136>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a16      	ldr	r2, [pc, #88]	@ (800568c <HAL_TIM_PWM_Start+0x18c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d111      	bne.n	800565a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b06      	cmp	r3, #6
 8005646:	d010      	beq.n	800566a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	e007      	b.n	800566a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40014000 	.word	0x40014000
 800568c:	40001800 	.word	0x40001800

08005690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0ae      	b.n	800580c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	f200 809f 	bhi.w	80057fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056be:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056f9 	.word	0x080056f9
 80056c8:	080057fd 	.word	0x080057fd
 80056cc:	080057fd 	.word	0x080057fd
 80056d0:	080057fd 	.word	0x080057fd
 80056d4:	08005739 	.word	0x08005739
 80056d8:	080057fd 	.word	0x080057fd
 80056dc:	080057fd 	.word	0x080057fd
 80056e0:	080057fd 	.word	0x080057fd
 80056e4:	0800577b 	.word	0x0800577b
 80056e8:	080057fd 	.word	0x080057fd
 80056ec:	080057fd 	.word	0x080057fd
 80056f0:	080057fd 	.word	0x080057fd
 80056f4:	080057bb 	.word	0x080057bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f9f0 	bl	8005ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
      break;
 8005736:	e064      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fa40 	bl	8005bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6999      	ldr	r1, [r3, #24]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	619a      	str	r2, [r3, #24]
      break;
 8005778:	e043      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa95 	bl	8005cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0208 	orr.w	r2, r2, #8
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0204 	bic.w	r2, r2, #4
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      break;
 80057b8:	e023      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fae9 	bl	8005d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	021a      	lsls	r2, r3, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	61da      	str	r2, [r3, #28]
      break;
 80057fa:	e002      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIM_ConfigClockSource+0x1c>
 800582c:	2302      	movs	r3, #2
 800582e:	e0b4      	b.n	800599a <HAL_TIM_ConfigClockSource+0x186>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800584e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005868:	d03e      	beq.n	80058e8 <HAL_TIM_ConfigClockSource+0xd4>
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586e:	f200 8087 	bhi.w	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005876:	f000 8086 	beq.w	8005986 <HAL_TIM_ConfigClockSource+0x172>
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587e:	d87f      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 8005880:	2b70      	cmp	r3, #112	@ 0x70
 8005882:	d01a      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xa6>
 8005884:	2b70      	cmp	r3, #112	@ 0x70
 8005886:	d87b      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b60      	cmp	r3, #96	@ 0x60
 800588a:	d050      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x11a>
 800588c:	2b60      	cmp	r3, #96	@ 0x60
 800588e:	d877      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b50      	cmp	r3, #80	@ 0x50
 8005892:	d03c      	beq.n	800590e <HAL_TIM_ConfigClockSource+0xfa>
 8005894:	2b50      	cmp	r3, #80	@ 0x50
 8005896:	d873      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b40      	cmp	r3, #64	@ 0x40
 800589a:	d058      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x13a>
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d86f      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b30      	cmp	r3, #48	@ 0x30
 80058a2:	d064      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x15a>
 80058a4:	2b30      	cmp	r3, #48	@ 0x30
 80058a6:	d86b      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d060      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d867      	bhi.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d05c      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d05a      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	e062      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6899      	ldr	r1, [r3, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f000 fb35 	bl	8005f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	609a      	str	r2, [r3, #8]
      break;
 80058e6:	e04f      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	6899      	ldr	r1, [r3, #8]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f000 fb1e 	bl	8005f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800590a:	609a      	str	r2, [r3, #8]
      break;
 800590c:	e03c      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6859      	ldr	r1, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	461a      	mov	r2, r3
 800591c:	f000 fa92 	bl	8005e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2150      	movs	r1, #80	@ 0x50
 8005926:	4618      	mov	r0, r3
 8005928:	f000 faeb 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 800592c:	e02c      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6859      	ldr	r1, [r3, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	461a      	mov	r2, r3
 800593c:	f000 fab1 	bl	8005ea2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2160      	movs	r1, #96	@ 0x60
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fadb 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 800594c:	e01c      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	461a      	mov	r2, r3
 800595c:	f000 fa72 	bl	8005e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2140      	movs	r1, #64	@ 0x40
 8005966:	4618      	mov	r0, r3
 8005968:	f000 facb 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 800596c:	e00c      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f000 fac2 	bl	8005f02 <TIM_ITRx_SetConfig>
      break;
 800597e:	e003      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
      break;
 8005984:	e000      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a40      	ldr	r2, [pc, #256]	@ (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3d      	ldr	r2, [pc, #244]	@ (8005abc <TIM_Base_SetConfig+0x118>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac0 <TIM_Base_SetConfig+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac4 <TIM_Base_SetConfig+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac8 <TIM_Base_SetConfig+0x124>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d02b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a04:	d027      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2c      	ldr	r2, [pc, #176]	@ (8005abc <TIM_Base_SetConfig+0x118>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d023      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2b      	ldr	r2, [pc, #172]	@ (8005ac0 <TIM_Base_SetConfig+0x11c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac4 <TIM_Base_SetConfig+0x120>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a29      	ldr	r2, [pc, #164]	@ (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a28      	ldr	r2, [pc, #160]	@ (8005acc <TIM_Base_SetConfig+0x128>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a27      	ldr	r2, [pc, #156]	@ (8005ad0 <TIM_Base_SetConfig+0x12c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a26      	ldr	r2, [pc, #152]	@ (8005ad4 <TIM_Base_SetConfig+0x130>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a25      	ldr	r2, [pc, #148]	@ (8005ad8 <TIM_Base_SetConfig+0x134>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a24      	ldr	r2, [pc, #144]	@ (8005adc <TIM_Base_SetConfig+0x138>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a23      	ldr	r2, [pc, #140]	@ (8005ae0 <TIM_Base_SetConfig+0x13c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0xf8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40001800 	.word	0x40001800
 8005adc:	40001c00 	.word	0x40001c00
 8005ae0:	40002000 	.word	0x40002000

08005ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0302 	bic.w	r3, r3, #2
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a20      	ldr	r2, [pc, #128]	@ (8005bbc <TIM_OC1_SetConfig+0xd8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC1_SetConfig+0x64>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10c      	bne.n	8005b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0308 	bic.w	r3, r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <TIM_OC1_SetConfig+0xd8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC1_SetConfig+0x8e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a14      	ldr	r2, [pc, #80]	@ (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400

08005bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0210 	bic.w	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f023 0320 	bic.w	r3, r3, #32
 8005c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ca8 <TIM_OC2_SetConfig+0xe4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC2_SetConfig+0x68>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a21      	ldr	r2, [pc, #132]	@ (8005cac <TIM_OC2_SetConfig+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10d      	bne.n	8005c48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <TIM_OC2_SetConfig+0xe4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC2_SetConfig+0x94>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <TIM_OC2_SetConfig+0xe8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d113      	bne.n	8005c80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40010400 	.word	0x40010400

08005cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a21      	ldr	r2, [pc, #132]	@ (8005d90 <TIM_OC3_SetConfig+0xe0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC3_SetConfig+0x66>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a20      	ldr	r2, [pc, #128]	@ (8005d94 <TIM_OC3_SetConfig+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10d      	bne.n	8005d32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a16      	ldr	r2, [pc, #88]	@ (8005d90 <TIM_OC3_SetConfig+0xe0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC3_SetConfig+0x92>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	@ (8005d94 <TIM_OC3_SetConfig+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400

08005d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a12      	ldr	r2, [pc, #72]	@ (8005e3c <TIM_OC4_SetConfig+0xa4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_OC4_SetConfig+0x68>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a11      	ldr	r2, [pc, #68]	@ (8005e40 <TIM_OC4_SetConfig+0xa8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d109      	bne.n	8005e14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	019b      	lsls	r3, r3, #6
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 030a 	bic.w	r3, r3, #10
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 0210 	bic.w	r2, r3, #16
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	031b      	lsls	r3, r3, #12
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f043 0307 	orr.w	r3, r3, #7
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	609a      	str	r2, [r3, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1a      	ldr	r2, [r3, #32]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e05a      	b.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a21      	ldr	r2, [pc, #132]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006028:	d01d      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1d      	ldr	r2, [pc, #116]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1a      	ldr	r2, [pc, #104]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a18      	ldr	r2, [pc, #96]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a17      	ldr	r2, [pc, #92]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a15      	ldr	r2, [pc, #84]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d10c      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4313      	orrs	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40010400 	.word	0x40010400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40001800 	.word	0x40001800

080060bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e03f      	b.n	800614e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb fd5e 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2224      	movs	r2, #36	@ 0x24
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fddf 	bl	8006cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b08a      	sub	sp, #40	@ 0x28
 800615a:	af02      	add	r7, sp, #8
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b20      	cmp	r3, #32
 8006174:	d17c      	bne.n	8006270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_Transmit+0x2c>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e075      	b.n	8006272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit+0x3e>
 8006190:	2302      	movs	r3, #2
 8006192:	e06e      	b.n	8006272 <HAL_UART_Transmit+0x11c>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2221      	movs	r2, #33	@ 0x21
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061aa:	f7fb ff17 	bl	8001fdc <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c4:	d108      	bne.n	80061d8 <HAL_UART_Transmit+0x82>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e003      	b.n	80061e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80061e8:	e02a      	b.n	8006240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fb1f 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e036      	b.n	8006272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3302      	adds	r3, #2
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e007      	b.n	8006232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1cf      	bne.n	80061ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	2140      	movs	r1, #64	@ 0x40
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 faef 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e006      	b.n	8006272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	4613      	mov	r3, r2
 8006286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b20      	cmp	r3, #32
 8006292:	d11d      	bne.n	80062d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_UART_Receive_IT+0x26>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e016      	b.n	80062d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_UART_Receive_IT+0x38>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e00f      	b.n	80062d2 <HAL_UART_Receive_IT+0x58>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 fb24 	bl	8006914 <UART_Start_Receive_IT>
 80062cc:	4603      	mov	r3, r0
 80062ce:	e000      	b.n	80062d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b0ba      	sub	sp, #232	@ 0xe8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006308:	2300      	movs	r3, #0
 800630a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800631a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_UART_IRQHandler+0x66>
 800632e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fc07 	bl	8006b4e <UART_Receive_IT>
      return;
 8006340:	e256      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80de 	beq.w	8006508 <HAL_UART_IRQHandler+0x22c>
 800634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80d1 	beq.w	8006508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_UART_IRQHandler+0xae>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f043 0201 	orr.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <HAL_UART_IRQHandler+0xd2>
 8006396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	f043 0202 	orr.w	r2, r3, #2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <HAL_UART_IRQHandler+0xf6>
 80063ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	f043 0204 	orr.w	r2, r3, #4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d011      	beq.n	8006402 <HAL_UART_IRQHandler+0x126>
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	f043 0208 	orr.w	r2, r3, #8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 81ed 	beq.w	80067e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_UART_IRQHandler+0x14e>
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fb92 	bl	8006b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006434:	2b40      	cmp	r3, #64	@ 0x40
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <HAL_UART_IRQHandler+0x17a>
 800644e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d04f      	beq.n	80064f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa9a 	bl	8006990 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	d141      	bne.n	80064ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3314      	adds	r3, #20
 8006470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006496:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800649a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d013      	beq.n	80064e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	4a7d      	ldr	r2, [pc, #500]	@ (80066b8 <HAL_UART_IRQHandler+0x3dc>)
 80064c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc fa1a 	bl	8002904 <HAL_DMA_Abort_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e00e      	b.n	8006504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f990 	bl	800680c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00a      	b.n	8006504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f98c 	bl	800680c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e006      	b.n	8006504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f988 	bl	800680c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006502:	e170      	b.n	80067e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	bf00      	nop
    return;
 8006506:	e16e      	b.n	80067e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 814a 	bne.w	80067a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8143 	beq.w	80067a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 813c 	beq.w	80067a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654e:	2b40      	cmp	r3, #64	@ 0x40
 8006550:	f040 80b4 	bne.w	80066bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8140 	beq.w	80067ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800656e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006572:	429a      	cmp	r2, r3
 8006574:	f080 8139 	bcs.w	80067ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800657e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658a:	f000 8088 	beq.w	800669e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1d9      	bne.n	800658e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e1      	bne.n	80065da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3314      	adds	r3, #20
 800661c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800662c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3314      	adds	r3, #20
 8006636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800663a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800663c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e3      	bne.n	8006616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800666c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666e:	f023 0310 	bic.w	r3, r3, #16
 8006672:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006680:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006682:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006686:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800668e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e3      	bne.n	800665c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	4618      	mov	r0, r3
 800669a:	f7fc f8c3 	bl	8002824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8b6 	bl	8006820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066b4:	e099      	b.n	80067ea <HAL_UART_IRQHandler+0x50e>
 80066b6:	bf00      	nop
 80066b8:	08006a57 	.word	0x08006a57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 808b 	beq.w	80067ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8086 	beq.w	80067ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006706:	647a      	str	r2, [r7, #68]	@ 0x44
 8006708:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800670c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3314      	adds	r3, #20
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	623b      	str	r3, [r7, #32]
   return(result);
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800673e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e3      	bne.n	800671a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0310 	bic.w	r3, r3, #16
 8006776:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006784:	61fa      	str	r2, [r7, #28]
 8006786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e3      	bne.n	8006760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f83e 	bl	8006820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067a4:	e023      	b.n	80067ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_UART_IRQHandler+0x4ea>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f95d 	bl	8006a7e <UART_Transmit_IT>
    return;
 80067c4:	e014      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00e      	beq.n	80067f0 <HAL_UART_IRQHandler+0x514>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f99d 	bl	8006b1e <UART_EndTransmit_IT>
    return;
 80067e4:	e004      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
    return;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
      return;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
      return;
 80067ee:	bf00      	nop
  }
}
 80067f0:	37e8      	adds	r7, #232	@ 0xe8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b090      	sub	sp, #64	@ 0x40
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	e050      	b.n	80068ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006850:	d04c      	beq.n	80068ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
 8006858:	f7fb fbc0 	bl	8001fdc <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006864:	429a      	cmp	r2, r3
 8006866:	d241      	bcs.n	80068ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006888:	637a      	str	r2, [r7, #52]	@ 0x34
 800688a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800688e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e5      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	613b      	str	r3, [r7, #16]
   return(result);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f023 0301 	bic.w	r3, r3, #1
 80068b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3314      	adds	r3, #20
 80068ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068bc:	623a      	str	r2, [r7, #32]
 80068be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	69f9      	ldr	r1, [r7, #28]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e00f      	b.n	800690c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4013      	ands	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	429a      	cmp	r2, r3
 8006908:	d09f      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3740      	adds	r7, #64	@ 0x40
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2222      	movs	r2, #34	@ 0x22
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006960:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0220 	orr.w	r2, r2, #32
 8006980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b095      	sub	sp, #84	@ 0x54
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	330c      	adds	r3, #12
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e5      	bne.n	8006998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3314      	adds	r3, #20
 80069d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	61fb      	str	r3, [r7, #28]
   return(result);
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d119      	bne.n	8006a3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a28:	61ba      	str	r2, [r7, #24]
 8006a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6979      	ldr	r1, [r7, #20]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	613b      	str	r3, [r7, #16]
   return(result);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a4a:	bf00      	nop
 8006a4c:	3754      	adds	r7, #84	@ 0x54
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7ff fecb 	bl	800680c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b21      	cmp	r3, #33	@ 0x21
 8006a90:	d13e      	bne.n	8006b10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a9a:	d114      	bne.n	8006ac6 <UART_Transmit_IT+0x48>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d110      	bne.n	8006ac6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	621a      	str	r2, [r3, #32]
 8006ac4:	e008      	b.n	8006ad8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6211      	str	r1, [r2, #32]
 8006ad0:	781a      	ldrb	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10f      	bne.n	8006b0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006afa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fe5a 	bl	80067f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b08c      	sub	sp, #48	@ 0x30
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b22      	cmp	r3, #34	@ 0x22
 8006b60:	f040 80ab 	bne.w	8006cba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6c:	d117      	bne.n	8006b9e <UART_Receive_IT+0x50>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d113      	bne.n	8006b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	1c9a      	adds	r2, r3, #2
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b9c:	e026      	b.n	8006bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb0:	d007      	beq.n	8006bc2 <UART_Receive_IT+0x74>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <UART_Receive_IT+0x82>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e008      	b.n	8006be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d15a      	bne.n	8006cb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0220 	bic.w	r2, r2, #32
 8006c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d135      	bne.n	8006cac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	613b      	str	r3, [r7, #16]
   return(result);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f023 0310 	bic.w	r3, r3, #16
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	623a      	str	r2, [r7, #32]
 8006c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	69f9      	ldr	r1, [r7, #28]
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b10      	cmp	r3, #16
 8006c86:	d10a      	bne.n	8006c9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fdbb 	bl	8006820 <HAL_UARTEx_RxEventCallback>
 8006caa:	e002      	b.n	8006cb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fa fa63 	bl	8001178 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e002      	b.n	8006cbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e000      	b.n	8006cbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
  }
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3730      	adds	r7, #48	@ 0x30
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc8:	b0c0      	sub	sp, #256	@ 0x100
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	68d9      	ldr	r1, [r3, #12]
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	ea40 0301 	orr.w	r3, r0, r1
 8006cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d1c:	f021 010c 	bic.w	r1, r1, #12
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3e:	6999      	ldr	r1, [r3, #24]
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	ea40 0301 	orr.w	r3, r0, r1
 8006d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b8f      	ldr	r3, [pc, #572]	@ (8006f90 <UART_SetConfig+0x2cc>)
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d005      	beq.n	8006d64 <UART_SetConfig+0xa0>
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8006f94 <UART_SetConfig+0x2d0>)
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d104      	bne.n	8006d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d64:	f7fd fb18 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 8006d68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d6c:	e003      	b.n	8006d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d6e:	f7fd faff 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8006d72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d80:	f040 810c 	bne.w	8006f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	1891      	adds	r1, r2, r2
 8006d9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d9e:	415b      	adcs	r3, r3
 8006da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006da6:	4621      	mov	r1, r4
 8006da8:	eb12 0801 	adds.w	r8, r2, r1
 8006dac:	4629      	mov	r1, r5
 8006dae:	eb43 0901 	adc.w	r9, r3, r1
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dc6:	4690      	mov	r8, r2
 8006dc8:	4699      	mov	r9, r3
 8006dca:	4623      	mov	r3, r4
 8006dcc:	eb18 0303 	adds.w	r3, r8, r3
 8006dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	eb49 0303 	adc.w	r3, r9, r3
 8006dda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006df2:	460b      	mov	r3, r1
 8006df4:	18db      	adds	r3, r3, r3
 8006df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df8:	4613      	mov	r3, r2
 8006dfa:	eb42 0303 	adc.w	r3, r2, r3
 8006dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e08:	f7f9 fe78 	bl	8000afc <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4b61      	ldr	r3, [pc, #388]	@ (8006f98 <UART_SetConfig+0x2d4>)
 8006e12:	fba3 2302 	umull	r2, r3, r3, r2
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	011c      	lsls	r4, r3, #4
 8006e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	1891      	adds	r1, r2, r2
 8006e32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e34:	415b      	adcs	r3, r3
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e42:	4649      	mov	r1, r9
 8006e44:	eb43 0b01 	adc.w	fp, r3, r1
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e5c:	4692      	mov	sl, r2
 8006e5e:	469b      	mov	fp, r3
 8006e60:	4643      	mov	r3, r8
 8006e62:	eb1a 0303 	adds.w	r3, sl, r3
 8006e66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8006e70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	18db      	adds	r3, r3, r3
 8006e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e8e:	4613      	mov	r3, r2
 8006e90:	eb42 0303 	adc.w	r3, r2, r3
 8006e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e9e:	f7f9 fe2d 	bl	8000afc <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8006f98 <UART_SetConfig+0x2d4>)
 8006eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	2264      	movs	r2, #100	@ 0x64
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	1acb      	subs	r3, r1, r3
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ebe:	4b36      	ldr	r3, [pc, #216]	@ (8006f98 <UART_SetConfig+0x2d4>)
 8006ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ecc:	441c      	add	r4, r3
 8006ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	1891      	adds	r1, r2, r2
 8006ee6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ee8:	415b      	adcs	r3, r3
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	1851      	adds	r1, r2, r1
 8006ef4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	414b      	adcs	r3, r1
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f08:	4659      	mov	r1, fp
 8006f0a:	00cb      	lsls	r3, r1, #3
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f12:	4651      	mov	r1, sl
 8006f14:	00ca      	lsls	r2, r1, #3
 8006f16:	4610      	mov	r0, r2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	189b      	adds	r3, r3, r2
 8006f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f24:	464b      	mov	r3, r9
 8006f26:	460a      	mov	r2, r1
 8006f28:	eb42 0303 	adc.w	r3, r2, r3
 8006f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f44:	460b      	mov	r3, r1
 8006f46:	18db      	adds	r3, r3, r3
 8006f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f5a:	f7f9 fdcf 	bl	8000afc <__aeabi_uldivmod>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <UART_SetConfig+0x2d4>)
 8006f64:	fba3 1302 	umull	r1, r3, r3, r2
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	2164      	movs	r1, #100	@ 0x64
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	3332      	adds	r3, #50	@ 0x32
 8006f76:	4a08      	ldr	r2, [pc, #32]	@ (8006f98 <UART_SetConfig+0x2d4>)
 8006f78:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f003 0207 	and.w	r2, r3, #7
 8006f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4422      	add	r2, r4
 8006f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f8c:	e106      	b.n	800719c <UART_SetConfig+0x4d8>
 8006f8e:	bf00      	nop
 8006f90:	40011000 	.word	0x40011000
 8006f94:	40011400 	.word	0x40011400
 8006f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fae:	4642      	mov	r2, r8
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	1891      	adds	r1, r2, r2
 8006fb4:	6239      	str	r1, [r7, #32]
 8006fb6:	415b      	adcs	r3, r3
 8006fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	1854      	adds	r4, r2, r1
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	eb43 0501 	adc.w	r5, r3, r1
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	00eb      	lsls	r3, r5, #3
 8006fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fd6:	00e2      	lsls	r2, r4, #3
 8006fd8:	4614      	mov	r4, r2
 8006fda:	461d      	mov	r5, r3
 8006fdc:	4643      	mov	r3, r8
 8006fde:	18e3      	adds	r3, r4, r3
 8006fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	eb45 0303 	adc.w	r3, r5, r3
 8006fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ffa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800700a:	4629      	mov	r1, r5
 800700c:	008b      	lsls	r3, r1, #2
 800700e:	4621      	mov	r1, r4
 8007010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007014:	4621      	mov	r1, r4
 8007016:	008a      	lsls	r2, r1, #2
 8007018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800701c:	f7f9 fd6e 	bl	8000afc <__aeabi_uldivmod>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4b60      	ldr	r3, [pc, #384]	@ (80071a8 <UART_SetConfig+0x4e4>)
 8007026:	fba3 2302 	umull	r2, r3, r3, r2
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	011c      	lsls	r4, r3, #4
 800702e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007032:	2200      	movs	r2, #0
 8007034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800703c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007040:	4642      	mov	r2, r8
 8007042:	464b      	mov	r3, r9
 8007044:	1891      	adds	r1, r2, r2
 8007046:	61b9      	str	r1, [r7, #24]
 8007048:	415b      	adcs	r3, r3
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007050:	4641      	mov	r1, r8
 8007052:	1851      	adds	r1, r2, r1
 8007054:	6139      	str	r1, [r7, #16]
 8007056:	4649      	mov	r1, r9
 8007058:	414b      	adcs	r3, r1
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007068:	4659      	mov	r1, fp
 800706a:	00cb      	lsls	r3, r1, #3
 800706c:	4651      	mov	r1, sl
 800706e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007072:	4651      	mov	r1, sl
 8007074:	00ca      	lsls	r2, r1, #3
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	4603      	mov	r3, r0
 800707c:	4642      	mov	r2, r8
 800707e:	189b      	adds	r3, r3, r2
 8007080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007084:	464b      	mov	r3, r9
 8007086:	460a      	mov	r2, r1
 8007088:	eb42 0303 	adc.w	r3, r2, r3
 800708c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	67bb      	str	r3, [r7, #120]	@ 0x78
 800709a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070a8:	4649      	mov	r1, r9
 80070aa:	008b      	lsls	r3, r1, #2
 80070ac:	4641      	mov	r1, r8
 80070ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b2:	4641      	mov	r1, r8
 80070b4:	008a      	lsls	r2, r1, #2
 80070b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070ba:	f7f9 fd1f 	bl	8000afc <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	4b38      	ldr	r3, [pc, #224]	@ (80071a8 <UART_SetConfig+0x4e4>)
 80070c6:	fba3 2301 	umull	r2, r3, r3, r1
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2264      	movs	r2, #100	@ 0x64
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	1acb      	subs	r3, r1, r3
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	3332      	adds	r3, #50	@ 0x32
 80070d8:	4a33      	ldr	r2, [pc, #204]	@ (80071a8 <UART_SetConfig+0x4e4>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070e4:	441c      	add	r4, r3
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ea:	2200      	movs	r2, #0
 80070ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80070f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	1891      	adds	r1, r2, r2
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	415b      	adcs	r3, r3
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007104:	4641      	mov	r1, r8
 8007106:	1851      	adds	r1, r2, r1
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	4649      	mov	r1, r9
 800710c:	414b      	adcs	r3, r1
 800710e:	607b      	str	r3, [r7, #4]
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800711c:	4659      	mov	r1, fp
 800711e:	00cb      	lsls	r3, r1, #3
 8007120:	4651      	mov	r1, sl
 8007122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007126:	4651      	mov	r1, sl
 8007128:	00ca      	lsls	r2, r1, #3
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	4603      	mov	r3, r0
 8007130:	4642      	mov	r2, r8
 8007132:	189b      	adds	r3, r3, r2
 8007134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007136:	464b      	mov	r3, r9
 8007138:	460a      	mov	r2, r1
 800713a:	eb42 0303 	adc.w	r3, r2, r3
 800713e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	663b      	str	r3, [r7, #96]	@ 0x60
 800714a:	667a      	str	r2, [r7, #100]	@ 0x64
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007158:	4649      	mov	r1, r9
 800715a:	008b      	lsls	r3, r1, #2
 800715c:	4641      	mov	r1, r8
 800715e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007162:	4641      	mov	r1, r8
 8007164:	008a      	lsls	r2, r1, #2
 8007166:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800716a:	f7f9 fcc7 	bl	8000afc <__aeabi_uldivmod>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <UART_SetConfig+0x4e4>)
 8007174:	fba3 1302 	umull	r1, r3, r3, r2
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	2164      	movs	r1, #100	@ 0x64
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	3332      	adds	r3, #50	@ 0x32
 8007186:	4a08      	ldr	r2, [pc, #32]	@ (80071a8 <UART_SetConfig+0x4e4>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	f003 020f 	and.w	r2, r3, #15
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4422      	add	r2, r4
 800719a:	609a      	str	r2, [r3, #8]
}
 800719c:	bf00      	nop
 800719e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071a2:	46bd      	mov	sp, r7
 80071a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a8:	51eb851f 	.word	0x51eb851f

080071ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071ac:	b084      	sub	sp, #16
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	f107 001c 	add.w	r0, r7, #28
 80071ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d122      	bne.n	800720a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80071d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d105      	bne.n	80071fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa9c 	bl	800773c <USB_CoreReset>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
 8007208:	e01a      	b.n	8007240 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa90 	bl	800773c <USB_CoreReset>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	639a      	str	r2, [r3, #56]	@ 0x38
 8007232:	e005      	b.n	8007240 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10b      	bne.n	800725e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f043 0206 	orr.w	r2, r3, #6
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f043 0220 	orr.w	r2, r3, #32
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800726a:	b004      	add	sp, #16
 800726c:	4770      	bx	lr

0800726e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d115      	bne.n	80072de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072be:	2001      	movs	r0, #1
 80072c0:	f7fa fe98 	bl	8001ff4 <HAL_Delay>
      ms++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa28 	bl	8007720 <USB_GetMode>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d01e      	beq.n	8007314 <USB_SetCurrentMode+0x84>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b31      	cmp	r3, #49	@ 0x31
 80072da:	d9f0      	bls.n	80072be <USB_SetCurrentMode+0x2e>
 80072dc:	e01a      	b.n	8007314 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d115      	bne.n	8007310 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072f0:	2001      	movs	r0, #1
 80072f2:	f7fa fe7f 	bl	8001ff4 <HAL_Delay>
      ms++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa0f 	bl	8007720 <USB_GetMode>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <USB_SetCurrentMode+0x84>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b31      	cmp	r3, #49	@ 0x31
 800730c:	d9f0      	bls.n	80072f0 <USB_SetCurrentMode+0x60>
 800730e:	e001      	b.n	8007314 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e005      	b.n	8007320 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b32      	cmp	r3, #50	@ 0x32
 8007318:	d101      	bne.n	800731e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007328:	b084      	sub	sp, #16
 800732a:	b580      	push	{r7, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	e009      	b.n	800735c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3340      	adds	r3, #64	@ 0x40
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	2200      	movs	r2, #0
 8007354:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	3301      	adds	r3, #1
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b0e      	cmp	r3, #14
 8007360:	d9f2      	bls.n	8007348 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11c      	bne.n	80073a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007376:	f043 0302 	orr.w	r3, r3, #2
 800737a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e005      	b.n	80073ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073b4:	461a      	mov	r2, r3
 80073b6:	2300      	movs	r3, #0
 80073b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c0:	4619      	mov	r1, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	461a      	mov	r2, r3
 80073ca:	680b      	ldr	r3, [r1, #0]
 80073cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d10c      	bne.n	80073ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073da:	2100      	movs	r1, #0
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f965 	bl	80076ac <USB_SetDevSpeed>
 80073e2:	e008      	b.n	80073f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073e4:	2101      	movs	r1, #1
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f960 	bl	80076ac <USB_SetDevSpeed>
 80073ec:	e003      	b.n	80073f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073ee:	2103      	movs	r1, #3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f95b 	bl	80076ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073f6:	2110      	movs	r1, #16
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f8f3 	bl	80075e4 <USB_FlushTxFifo>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f91f 	bl	800764c <USB_FlushRxFifo>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742a:	461a      	mov	r2, r3
 800742c:	2300      	movs	r3, #0
 800742e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007436:	461a      	mov	r2, r3
 8007438:	2300      	movs	r3, #0
 800743a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	e043      	b.n	80074ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007458:	d118      	bne.n	800748c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746c:	461a      	mov	r2, r3
 800746e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e013      	b.n	800749e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007482:	461a      	mov	r2, r3
 8007484:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	e008      	b.n	800749e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	2300      	movs	r3, #0
 800749c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074aa:	461a      	mov	r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074bc:	461a      	mov	r2, r3
 80074be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	3301      	adds	r3, #1
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d3b7      	bcc.n	8007442 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	e043      	b.n	8007560 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ee:	d118      	bne.n	8007522 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	e013      	b.n	8007534 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007518:	461a      	mov	r2, r3
 800751a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e008      	b.n	8007534 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752e:	461a      	mov	r2, r3
 8007530:	2300      	movs	r3, #0
 8007532:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	461a      	mov	r2, r3
 8007542:	2300      	movs	r3, #0
 8007544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007552:	461a      	mov	r2, r3
 8007554:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007558:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3301      	adds	r3, #1
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	d3b7      	bcc.n	80074d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007576:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800757a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007588:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b00      	cmp	r3, #0
 800758e:	d105      	bne.n	800759c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f043 0210 	orr.w	r2, r3, #16
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699a      	ldr	r2, [r3, #24]
 80075a0:	4b0f      	ldr	r3, [pc, #60]	@ (80075e0 <USB_DevInit+0x2b8>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f043 0208 	orr.w	r2, r3, #8
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d107      	bne.n	80075d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075c8:	f043 0304 	orr.w	r3, r3, #4
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075dc:	b004      	add	sp, #16
 80075de:	4770      	bx	lr
 80075e0:	803c3800 	.word	0x803c3800

080075e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a13      	ldr	r2, [pc, #76]	@ (8007648 <USB_FlushTxFifo+0x64>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d901      	bls.n	8007604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e01b      	b.n	800763c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	daf2      	bge.n	80075f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	019b      	lsls	r3, r3, #6
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3301      	adds	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4a08      	ldr	r2, [pc, #32]	@ (8007648 <USB_FlushTxFifo+0x64>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e006      	b.n	800763c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b20      	cmp	r3, #32
 8007638:	d0f0      	beq.n	800761c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	00030d40 	.word	0x00030d40

0800764c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4a11      	ldr	r2, [pc, #68]	@ (80076a8 <USB_FlushRxFifo+0x5c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e018      	b.n	800769c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	daf2      	bge.n	8007658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2210      	movs	r2, #16
 800767a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a08      	ldr	r2, [pc, #32]	@ (80076a8 <USB_FlushRxFifo+0x5c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e006      	b.n	800769c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b10      	cmp	r3, #16
 8007698:	d0f0      	beq.n	800767c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	00030d40 	.word	0x00030d40

080076ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076cc:	4313      	orrs	r3, r2
 80076ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076f8:	f023 0303 	bic.w	r3, r3, #3
 80076fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0301 	and.w	r3, r3, #1
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4a13      	ldr	r2, [pc, #76]	@ (80077a0 <USB_CoreReset+0x64>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e01b      	b.n	8007792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	daf2      	bge.n	8007748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f043 0201 	orr.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a09      	ldr	r2, [pc, #36]	@ (80077a0 <USB_CoreReset+0x64>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d0f0      	beq.n	8007772 <USB_CoreReset+0x36>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	00030d40 	.word	0x00030d40

080077a4 <atoi>:
 80077a4:	220a      	movs	r2, #10
 80077a6:	2100      	movs	r1, #0
 80077a8:	f000 b89a 	b.w	80078e0 <strtol>

080077ac <siprintf>:
 80077ac:	b40e      	push	{r1, r2, r3}
 80077ae:	b500      	push	{lr}
 80077b0:	b09c      	sub	sp, #112	@ 0x70
 80077b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80077b4:	9002      	str	r0, [sp, #8]
 80077b6:	9006      	str	r0, [sp, #24]
 80077b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077bc:	4809      	ldr	r0, [pc, #36]	@ (80077e4 <siprintf+0x38>)
 80077be:	9107      	str	r1, [sp, #28]
 80077c0:	9104      	str	r1, [sp, #16]
 80077c2:	4909      	ldr	r1, [pc, #36]	@ (80077e8 <siprintf+0x3c>)
 80077c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c8:	9105      	str	r1, [sp, #20]
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	a902      	add	r1, sp, #8
 80077d0:	f000 f920 	bl	8007a14 <_svfiprintf_r>
 80077d4:	9b02      	ldr	r3, [sp, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	b01c      	add	sp, #112	@ 0x70
 80077dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e0:	b003      	add	sp, #12
 80077e2:	4770      	bx	lr
 80077e4:	20000010 	.word	0x20000010
 80077e8:	ffff0208 	.word	0xffff0208

080077ec <_strtol_l.constprop.0>:
 80077ec:	2b24      	cmp	r3, #36	@ 0x24
 80077ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f2:	4686      	mov	lr, r0
 80077f4:	4690      	mov	r8, r2
 80077f6:	d801      	bhi.n	80077fc <_strtol_l.constprop.0+0x10>
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d106      	bne.n	800780a <_strtol_l.constprop.0+0x1e>
 80077fc:	f000 f882 	bl	8007904 <__errno>
 8007800:	2316      	movs	r3, #22
 8007802:	6003      	str	r3, [r0, #0]
 8007804:	2000      	movs	r0, #0
 8007806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780a:	4834      	ldr	r0, [pc, #208]	@ (80078dc <_strtol_l.constprop.0+0xf0>)
 800780c:	460d      	mov	r5, r1
 800780e:	462a      	mov	r2, r5
 8007810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007814:	5d06      	ldrb	r6, [r0, r4]
 8007816:	f016 0608 	ands.w	r6, r6, #8
 800781a:	d1f8      	bne.n	800780e <_strtol_l.constprop.0+0x22>
 800781c:	2c2d      	cmp	r4, #45	@ 0x2d
 800781e:	d12d      	bne.n	800787c <_strtol_l.constprop.0+0x90>
 8007820:	782c      	ldrb	r4, [r5, #0]
 8007822:	2601      	movs	r6, #1
 8007824:	1c95      	adds	r5, r2, #2
 8007826:	f033 0210 	bics.w	r2, r3, #16
 800782a:	d109      	bne.n	8007840 <_strtol_l.constprop.0+0x54>
 800782c:	2c30      	cmp	r4, #48	@ 0x30
 800782e:	d12a      	bne.n	8007886 <_strtol_l.constprop.0+0x9a>
 8007830:	782a      	ldrb	r2, [r5, #0]
 8007832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007836:	2a58      	cmp	r2, #88	@ 0x58
 8007838:	d125      	bne.n	8007886 <_strtol_l.constprop.0+0x9a>
 800783a:	786c      	ldrb	r4, [r5, #1]
 800783c:	2310      	movs	r3, #16
 800783e:	3502      	adds	r5, #2
 8007840:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007844:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007848:	2200      	movs	r2, #0
 800784a:	fbbc f9f3 	udiv	r9, ip, r3
 800784e:	4610      	mov	r0, r2
 8007850:	fb03 ca19 	mls	sl, r3, r9, ip
 8007854:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007858:	2f09      	cmp	r7, #9
 800785a:	d81b      	bhi.n	8007894 <_strtol_l.constprop.0+0xa8>
 800785c:	463c      	mov	r4, r7
 800785e:	42a3      	cmp	r3, r4
 8007860:	dd27      	ble.n	80078b2 <_strtol_l.constprop.0+0xc6>
 8007862:	1c57      	adds	r7, r2, #1
 8007864:	d007      	beq.n	8007876 <_strtol_l.constprop.0+0x8a>
 8007866:	4581      	cmp	r9, r0
 8007868:	d320      	bcc.n	80078ac <_strtol_l.constprop.0+0xc0>
 800786a:	d101      	bne.n	8007870 <_strtol_l.constprop.0+0x84>
 800786c:	45a2      	cmp	sl, r4
 800786e:	db1d      	blt.n	80078ac <_strtol_l.constprop.0+0xc0>
 8007870:	fb00 4003 	mla	r0, r0, r3, r4
 8007874:	2201      	movs	r2, #1
 8007876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800787a:	e7eb      	b.n	8007854 <_strtol_l.constprop.0+0x68>
 800787c:	2c2b      	cmp	r4, #43	@ 0x2b
 800787e:	bf04      	itt	eq
 8007880:	782c      	ldrbeq	r4, [r5, #0]
 8007882:	1c95      	addeq	r5, r2, #2
 8007884:	e7cf      	b.n	8007826 <_strtol_l.constprop.0+0x3a>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1da      	bne.n	8007840 <_strtol_l.constprop.0+0x54>
 800788a:	2c30      	cmp	r4, #48	@ 0x30
 800788c:	bf0c      	ite	eq
 800788e:	2308      	moveq	r3, #8
 8007890:	230a      	movne	r3, #10
 8007892:	e7d5      	b.n	8007840 <_strtol_l.constprop.0+0x54>
 8007894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007898:	2f19      	cmp	r7, #25
 800789a:	d801      	bhi.n	80078a0 <_strtol_l.constprop.0+0xb4>
 800789c:	3c37      	subs	r4, #55	@ 0x37
 800789e:	e7de      	b.n	800785e <_strtol_l.constprop.0+0x72>
 80078a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80078a4:	2f19      	cmp	r7, #25
 80078a6:	d804      	bhi.n	80078b2 <_strtol_l.constprop.0+0xc6>
 80078a8:	3c57      	subs	r4, #87	@ 0x57
 80078aa:	e7d8      	b.n	800785e <_strtol_l.constprop.0+0x72>
 80078ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078b0:	e7e1      	b.n	8007876 <_strtol_l.constprop.0+0x8a>
 80078b2:	1c53      	adds	r3, r2, #1
 80078b4:	d108      	bne.n	80078c8 <_strtol_l.constprop.0+0xdc>
 80078b6:	2322      	movs	r3, #34	@ 0x22
 80078b8:	f8ce 3000 	str.w	r3, [lr]
 80078bc:	4660      	mov	r0, ip
 80078be:	f1b8 0f00 	cmp.w	r8, #0
 80078c2:	d0a0      	beq.n	8007806 <_strtol_l.constprop.0+0x1a>
 80078c4:	1e69      	subs	r1, r5, #1
 80078c6:	e006      	b.n	80078d6 <_strtol_l.constprop.0+0xea>
 80078c8:	b106      	cbz	r6, 80078cc <_strtol_l.constprop.0+0xe0>
 80078ca:	4240      	negs	r0, r0
 80078cc:	f1b8 0f00 	cmp.w	r8, #0
 80078d0:	d099      	beq.n	8007806 <_strtol_l.constprop.0+0x1a>
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	d1f6      	bne.n	80078c4 <_strtol_l.constprop.0+0xd8>
 80078d6:	f8c8 1000 	str.w	r1, [r8]
 80078da:	e794      	b.n	8007806 <_strtol_l.constprop.0+0x1a>
 80078dc:	080082c5 	.word	0x080082c5

080078e0 <strtol>:
 80078e0:	4613      	mov	r3, r2
 80078e2:	460a      	mov	r2, r1
 80078e4:	4601      	mov	r1, r0
 80078e6:	4802      	ldr	r0, [pc, #8]	@ (80078f0 <strtol+0x10>)
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f7ff bf7f 	b.w	80077ec <_strtol_l.constprop.0>
 80078ee:	bf00      	nop
 80078f0:	20000010 	.word	0x20000010

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <__errno>:
 8007904:	4b01      	ldr	r3, [pc, #4]	@ (800790c <__errno+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20000010 	.word	0x20000010

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4d0d      	ldr	r5, [pc, #52]	@ (8007948 <__libc_init_array+0x38>)
 8007914:	4c0d      	ldr	r4, [pc, #52]	@ (800794c <__libc_init_array+0x3c>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	2600      	movs	r6, #0
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	4d0b      	ldr	r5, [pc, #44]	@ (8007950 <__libc_init_array+0x40>)
 8007922:	4c0c      	ldr	r4, [pc, #48]	@ (8007954 <__libc_init_array+0x44>)
 8007924:	f000 fc66 	bl	80081f4 <_init>
 8007928:	1b64      	subs	r4, r4, r5
 800792a:	10a4      	asrs	r4, r4, #2
 800792c:	2600      	movs	r6, #0
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	08008400 	.word	0x08008400
 800794c:	08008400 	.word	0x08008400
 8007950:	08008400 	.word	0x08008400
 8007954:	08008404 	.word	0x08008404

08007958 <__retarget_lock_acquire_recursive>:
 8007958:	4770      	bx	lr

0800795a <__retarget_lock_release_recursive>:
 800795a:	4770      	bx	lr

0800795c <__ssputs_r>:
 800795c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	688e      	ldr	r6, [r1, #8]
 8007962:	461f      	mov	r7, r3
 8007964:	42be      	cmp	r6, r7
 8007966:	680b      	ldr	r3, [r1, #0]
 8007968:	4682      	mov	sl, r0
 800796a:	460c      	mov	r4, r1
 800796c:	4690      	mov	r8, r2
 800796e:	d82d      	bhi.n	80079cc <__ssputs_r+0x70>
 8007970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007978:	d026      	beq.n	80079c8 <__ssputs_r+0x6c>
 800797a:	6965      	ldr	r5, [r4, #20]
 800797c:	6909      	ldr	r1, [r1, #16]
 800797e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007982:	eba3 0901 	sub.w	r9, r3, r1
 8007986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800798a:	1c7b      	adds	r3, r7, #1
 800798c:	444b      	add	r3, r9
 800798e:	106d      	asrs	r5, r5, #1
 8007990:	429d      	cmp	r5, r3
 8007992:	bf38      	it	cc
 8007994:	461d      	movcc	r5, r3
 8007996:	0553      	lsls	r3, r2, #21
 8007998:	d527      	bpl.n	80079ea <__ssputs_r+0x8e>
 800799a:	4629      	mov	r1, r5
 800799c:	f000 f958 	bl	8007c50 <_malloc_r>
 80079a0:	4606      	mov	r6, r0
 80079a2:	b360      	cbz	r0, 80079fe <__ssputs_r+0xa2>
 80079a4:	6921      	ldr	r1, [r4, #16]
 80079a6:	464a      	mov	r2, r9
 80079a8:	f000 fbc4 	bl	8008134 <memcpy>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	6126      	str	r6, [r4, #16]
 80079ba:	6165      	str	r5, [r4, #20]
 80079bc:	444e      	add	r6, r9
 80079be:	eba5 0509 	sub.w	r5, r5, r9
 80079c2:	6026      	str	r6, [r4, #0]
 80079c4:	60a5      	str	r5, [r4, #8]
 80079c6:	463e      	mov	r6, r7
 80079c8:	42be      	cmp	r6, r7
 80079ca:	d900      	bls.n	80079ce <__ssputs_r+0x72>
 80079cc:	463e      	mov	r6, r7
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	4632      	mov	r2, r6
 80079d2:	4641      	mov	r1, r8
 80079d4:	f000 fb84 	bl	80080e0 <memmove>
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	1b9b      	subs	r3, r3, r6
 80079dc:	60a3      	str	r3, [r4, #8]
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	4433      	add	r3, r6
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	2000      	movs	r0, #0
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	462a      	mov	r2, r5
 80079ec:	f000 fb4a 	bl	8008084 <_realloc_r>
 80079f0:	4606      	mov	r6, r0
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d1e0      	bne.n	80079b8 <__ssputs_r+0x5c>
 80079f6:	6921      	ldr	r1, [r4, #16]
 80079f8:	4650      	mov	r0, sl
 80079fa:	f000 fba9 	bl	8008150 <_free_r>
 80079fe:	230c      	movs	r3, #12
 8007a00:	f8ca 3000 	str.w	r3, [sl]
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0a:	81a3      	strh	r3, [r4, #12]
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a10:	e7e9      	b.n	80079e6 <__ssputs_r+0x8a>
	...

08007a14 <_svfiprintf_r>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	4698      	mov	r8, r3
 8007a1a:	898b      	ldrh	r3, [r1, #12]
 8007a1c:	061b      	lsls	r3, r3, #24
 8007a1e:	b09d      	sub	sp, #116	@ 0x74
 8007a20:	4607      	mov	r7, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	d510      	bpl.n	8007a4a <_svfiprintf_r+0x36>
 8007a28:	690b      	ldr	r3, [r1, #16]
 8007a2a:	b973      	cbnz	r3, 8007a4a <_svfiprintf_r+0x36>
 8007a2c:	2140      	movs	r1, #64	@ 0x40
 8007a2e:	f000 f90f 	bl	8007c50 <_malloc_r>
 8007a32:	6028      	str	r0, [r5, #0]
 8007a34:	6128      	str	r0, [r5, #16]
 8007a36:	b930      	cbnz	r0, 8007a46 <_svfiprintf_r+0x32>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a40:	b01d      	add	sp, #116	@ 0x74
 8007a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a46:	2340      	movs	r3, #64	@ 0x40
 8007a48:	616b      	str	r3, [r5, #20]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a4e:	2320      	movs	r3, #32
 8007a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a58:	2330      	movs	r3, #48	@ 0x30
 8007a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bf8 <_svfiprintf_r+0x1e4>
 8007a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a62:	f04f 0901 	mov.w	r9, #1
 8007a66:	4623      	mov	r3, r4
 8007a68:	469a      	mov	sl, r3
 8007a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6e:	b10a      	cbz	r2, 8007a74 <_svfiprintf_r+0x60>
 8007a70:	2a25      	cmp	r2, #37	@ 0x25
 8007a72:	d1f9      	bne.n	8007a68 <_svfiprintf_r+0x54>
 8007a74:	ebba 0b04 	subs.w	fp, sl, r4
 8007a78:	d00b      	beq.n	8007a92 <_svfiprintf_r+0x7e>
 8007a7a:	465b      	mov	r3, fp
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff ff6b 	bl	800795c <__ssputs_r>
 8007a86:	3001      	adds	r0, #1
 8007a88:	f000 80a7 	beq.w	8007bda <_svfiprintf_r+0x1c6>
 8007a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a8e:	445a      	add	r2, fp
 8007a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a92:	f89a 3000 	ldrb.w	r3, [sl]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 809f 	beq.w	8007bda <_svfiprintf_r+0x1c6>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa6:	f10a 0a01 	add.w	sl, sl, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	9307      	str	r3, [sp, #28]
 8007aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ab4:	4654      	mov	r4, sl
 8007ab6:	2205      	movs	r2, #5
 8007ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abc:	484e      	ldr	r0, [pc, #312]	@ (8007bf8 <_svfiprintf_r+0x1e4>)
 8007abe:	f7f8 fbaf 	bl	8000220 <memchr>
 8007ac2:	9a04      	ldr	r2, [sp, #16]
 8007ac4:	b9d8      	cbnz	r0, 8007afe <_svfiprintf_r+0xea>
 8007ac6:	06d0      	lsls	r0, r2, #27
 8007ac8:	bf44      	itt	mi
 8007aca:	2320      	movmi	r3, #32
 8007acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ad0:	0711      	lsls	r1, r2, #28
 8007ad2:	bf44      	itt	mi
 8007ad4:	232b      	movmi	r3, #43	@ 0x2b
 8007ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ada:	f89a 3000 	ldrb.w	r3, [sl]
 8007ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ae0:	d015      	beq.n	8007b0e <_svfiprintf_r+0xfa>
 8007ae2:	9a07      	ldr	r2, [sp, #28]
 8007ae4:	4654      	mov	r4, sl
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	4621      	mov	r1, r4
 8007aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af2:	3b30      	subs	r3, #48	@ 0x30
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	d94b      	bls.n	8007b90 <_svfiprintf_r+0x17c>
 8007af8:	b1b0      	cbz	r0, 8007b28 <_svfiprintf_r+0x114>
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	e014      	b.n	8007b28 <_svfiprintf_r+0x114>
 8007afe:	eba0 0308 	sub.w	r3, r0, r8
 8007b02:	fa09 f303 	lsl.w	r3, r9, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	46a2      	mov	sl, r4
 8007b0c:	e7d2      	b.n	8007ab4 <_svfiprintf_r+0xa0>
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	1d19      	adds	r1, r3, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	9103      	str	r1, [sp, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfbb      	ittet	lt
 8007b1a:	425b      	neglt	r3, r3
 8007b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b20:	9307      	strge	r3, [sp, #28]
 8007b22:	9307      	strlt	r3, [sp, #28]
 8007b24:	bfb8      	it	lt
 8007b26:	9204      	strlt	r2, [sp, #16]
 8007b28:	7823      	ldrb	r3, [r4, #0]
 8007b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b2c:	d10a      	bne.n	8007b44 <_svfiprintf_r+0x130>
 8007b2e:	7863      	ldrb	r3, [r4, #1]
 8007b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b32:	d132      	bne.n	8007b9a <_svfiprintf_r+0x186>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	1d1a      	adds	r2, r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	9203      	str	r2, [sp, #12]
 8007b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b40:	3402      	adds	r4, #2
 8007b42:	9305      	str	r3, [sp, #20]
 8007b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c08 <_svfiprintf_r+0x1f4>
 8007b48:	7821      	ldrb	r1, [r4, #0]
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	f7f8 fb67 	bl	8000220 <memchr>
 8007b52:	b138      	cbz	r0, 8007b64 <_svfiprintf_r+0x150>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	eba0 000a 	sub.w	r0, r0, sl
 8007b5a:	2240      	movs	r2, #64	@ 0x40
 8007b5c:	4082      	lsls	r2, r0
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	3401      	adds	r4, #1
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b68:	4824      	ldr	r0, [pc, #144]	@ (8007bfc <_svfiprintf_r+0x1e8>)
 8007b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b6e:	2206      	movs	r2, #6
 8007b70:	f7f8 fb56 	bl	8000220 <memchr>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d036      	beq.n	8007be6 <_svfiprintf_r+0x1d2>
 8007b78:	4b21      	ldr	r3, [pc, #132]	@ (8007c00 <_svfiprintf_r+0x1ec>)
 8007b7a:	bb1b      	cbnz	r3, 8007bc4 <_svfiprintf_r+0x1b0>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	3307      	adds	r3, #7
 8007b80:	f023 0307 	bic.w	r3, r3, #7
 8007b84:	3308      	adds	r3, #8
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8a:	4433      	add	r3, r6
 8007b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b8e:	e76a      	b.n	8007a66 <_svfiprintf_r+0x52>
 8007b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b94:	460c      	mov	r4, r1
 8007b96:	2001      	movs	r0, #1
 8007b98:	e7a8      	b.n	8007aec <_svfiprintf_r+0xd8>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	3401      	adds	r4, #1
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bac:	3a30      	subs	r2, #48	@ 0x30
 8007bae:	2a09      	cmp	r2, #9
 8007bb0:	d903      	bls.n	8007bba <_svfiprintf_r+0x1a6>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0c6      	beq.n	8007b44 <_svfiprintf_r+0x130>
 8007bb6:	9105      	str	r1, [sp, #20]
 8007bb8:	e7c4      	b.n	8007b44 <_svfiprintf_r+0x130>
 8007bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e7f0      	b.n	8007ba6 <_svfiprintf_r+0x192>
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	462a      	mov	r2, r5
 8007bca:	4b0e      	ldr	r3, [pc, #56]	@ (8007c04 <_svfiprintf_r+0x1f0>)
 8007bcc:	a904      	add	r1, sp, #16
 8007bce:	4638      	mov	r0, r7
 8007bd0:	f3af 8000 	nop.w
 8007bd4:	1c42      	adds	r2, r0, #1
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	d1d6      	bne.n	8007b88 <_svfiprintf_r+0x174>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	065b      	lsls	r3, r3, #25
 8007bde:	f53f af2d 	bmi.w	8007a3c <_svfiprintf_r+0x28>
 8007be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007be4:	e72c      	b.n	8007a40 <_svfiprintf_r+0x2c>
 8007be6:	ab03      	add	r3, sp, #12
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	462a      	mov	r2, r5
 8007bec:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <_svfiprintf_r+0x1f0>)
 8007bee:	a904      	add	r1, sp, #16
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f000 f91b 	bl	8007e2c <_printf_i>
 8007bf6:	e7ed      	b.n	8007bd4 <_svfiprintf_r+0x1c0>
 8007bf8:	080083c5 	.word	0x080083c5
 8007bfc:	080083cf 	.word	0x080083cf
 8007c00:	00000000 	.word	0x00000000
 8007c04:	0800795d 	.word	0x0800795d
 8007c08:	080083cb 	.word	0x080083cb

08007c0c <sbrk_aligned>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c4c <sbrk_aligned+0x40>)
 8007c10:	460c      	mov	r4, r1
 8007c12:	6831      	ldr	r1, [r6, #0]
 8007c14:	4605      	mov	r5, r0
 8007c16:	b911      	cbnz	r1, 8007c1e <sbrk_aligned+0x12>
 8007c18:	f000 fa7c 	bl	8008114 <_sbrk_r>
 8007c1c:	6030      	str	r0, [r6, #0]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 fa77 	bl	8008114 <_sbrk_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d103      	bne.n	8007c32 <sbrk_aligned+0x26>
 8007c2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007c2e:	4620      	mov	r0, r4
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	1cc4      	adds	r4, r0, #3
 8007c34:	f024 0403 	bic.w	r4, r4, #3
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d0f8      	beq.n	8007c2e <sbrk_aligned+0x22>
 8007c3c:	1a21      	subs	r1, r4, r0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fa68 	bl	8008114 <_sbrk_r>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d1f2      	bne.n	8007c2e <sbrk_aligned+0x22>
 8007c48:	e7ef      	b.n	8007c2a <sbrk_aligned+0x1e>
 8007c4a:	bf00      	nop
 8007c4c:	20000874 	.word	0x20000874

08007c50 <_malloc_r>:
 8007c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c54:	1ccd      	adds	r5, r1, #3
 8007c56:	f025 0503 	bic.w	r5, r5, #3
 8007c5a:	3508      	adds	r5, #8
 8007c5c:	2d0c      	cmp	r5, #12
 8007c5e:	bf38      	it	cc
 8007c60:	250c      	movcc	r5, #12
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	4606      	mov	r6, r0
 8007c66:	db01      	blt.n	8007c6c <_malloc_r+0x1c>
 8007c68:	42a9      	cmp	r1, r5
 8007c6a:	d904      	bls.n	8007c76 <_malloc_r+0x26>
 8007c6c:	230c      	movs	r3, #12
 8007c6e:	6033      	str	r3, [r6, #0]
 8007c70:	2000      	movs	r0, #0
 8007c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d4c <_malloc_r+0xfc>
 8007c7a:	f000 f9f7 	bl	800806c <__malloc_lock>
 8007c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c82:	461c      	mov	r4, r3
 8007c84:	bb44      	cbnz	r4, 8007cd8 <_malloc_r+0x88>
 8007c86:	4629      	mov	r1, r5
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff ffbf 	bl	8007c0c <sbrk_aligned>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	4604      	mov	r4, r0
 8007c92:	d158      	bne.n	8007d46 <_malloc_r+0xf6>
 8007c94:	f8d8 4000 	ldr.w	r4, [r8]
 8007c98:	4627      	mov	r7, r4
 8007c9a:	2f00      	cmp	r7, #0
 8007c9c:	d143      	bne.n	8007d26 <_malloc_r+0xd6>
 8007c9e:	2c00      	cmp	r4, #0
 8007ca0:	d04b      	beq.n	8007d3a <_malloc_r+0xea>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	eb04 0903 	add.w	r9, r4, r3
 8007cac:	f000 fa32 	bl	8008114 <_sbrk_r>
 8007cb0:	4581      	cmp	r9, r0
 8007cb2:	d142      	bne.n	8007d3a <_malloc_r+0xea>
 8007cb4:	6821      	ldr	r1, [r4, #0]
 8007cb6:	1a6d      	subs	r5, r5, r1
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7ff ffa6 	bl	8007c0c <sbrk_aligned>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d03a      	beq.n	8007d3a <_malloc_r+0xea>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	442b      	add	r3, r5
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	f8d8 3000 	ldr.w	r3, [r8]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	bb62      	cbnz	r2, 8007d2c <_malloc_r+0xdc>
 8007cd2:	f8c8 7000 	str.w	r7, [r8]
 8007cd6:	e00f      	b.n	8007cf8 <_malloc_r+0xa8>
 8007cd8:	6822      	ldr	r2, [r4, #0]
 8007cda:	1b52      	subs	r2, r2, r5
 8007cdc:	d420      	bmi.n	8007d20 <_malloc_r+0xd0>
 8007cde:	2a0b      	cmp	r2, #11
 8007ce0:	d917      	bls.n	8007d12 <_malloc_r+0xc2>
 8007ce2:	1961      	adds	r1, r4, r5
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	6025      	str	r5, [r4, #0]
 8007ce8:	bf18      	it	ne
 8007cea:	6059      	strne	r1, [r3, #4]
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	bf08      	it	eq
 8007cf0:	f8c8 1000 	streq.w	r1, [r8]
 8007cf4:	5162      	str	r2, [r4, r5]
 8007cf6:	604b      	str	r3, [r1, #4]
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f000 f9bd 	bl	8008078 <__malloc_unlock>
 8007cfe:	f104 000b 	add.w	r0, r4, #11
 8007d02:	1d23      	adds	r3, r4, #4
 8007d04:	f020 0007 	bic.w	r0, r0, #7
 8007d08:	1ac2      	subs	r2, r0, r3
 8007d0a:	bf1c      	itt	ne
 8007d0c:	1a1b      	subne	r3, r3, r0
 8007d0e:	50a3      	strne	r3, [r4, r2]
 8007d10:	e7af      	b.n	8007c72 <_malloc_r+0x22>
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	bf0c      	ite	eq
 8007d18:	f8c8 2000 	streq.w	r2, [r8]
 8007d1c:	605a      	strne	r2, [r3, #4]
 8007d1e:	e7eb      	b.n	8007cf8 <_malloc_r+0xa8>
 8007d20:	4623      	mov	r3, r4
 8007d22:	6864      	ldr	r4, [r4, #4]
 8007d24:	e7ae      	b.n	8007c84 <_malloc_r+0x34>
 8007d26:	463c      	mov	r4, r7
 8007d28:	687f      	ldr	r7, [r7, #4]
 8007d2a:	e7b6      	b.n	8007c9a <_malloc_r+0x4a>
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d1fb      	bne.n	8007d2c <_malloc_r+0xdc>
 8007d34:	2300      	movs	r3, #0
 8007d36:	6053      	str	r3, [r2, #4]
 8007d38:	e7de      	b.n	8007cf8 <_malloc_r+0xa8>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 f99a 	bl	8008078 <__malloc_unlock>
 8007d44:	e794      	b.n	8007c70 <_malloc_r+0x20>
 8007d46:	6005      	str	r5, [r0, #0]
 8007d48:	e7d6      	b.n	8007cf8 <_malloc_r+0xa8>
 8007d4a:	bf00      	nop
 8007d4c:	20000878 	.word	0x20000878

08007d50 <_printf_common>:
 8007d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	4616      	mov	r6, r2
 8007d56:	4698      	mov	r8, r3
 8007d58:	688a      	ldr	r2, [r1, #8]
 8007d5a:	690b      	ldr	r3, [r1, #16]
 8007d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d60:	4293      	cmp	r3, r2
 8007d62:	bfb8      	it	lt
 8007d64:	4613      	movlt	r3, r2
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	b10a      	cbz	r2, 8007d76 <_printf_common+0x26>
 8007d72:	3301      	adds	r3, #1
 8007d74:	6033      	str	r3, [r6, #0]
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	0699      	lsls	r1, r3, #26
 8007d7a:	bf42      	ittt	mi
 8007d7c:	6833      	ldrmi	r3, [r6, #0]
 8007d7e:	3302      	addmi	r3, #2
 8007d80:	6033      	strmi	r3, [r6, #0]
 8007d82:	6825      	ldr	r5, [r4, #0]
 8007d84:	f015 0506 	ands.w	r5, r5, #6
 8007d88:	d106      	bne.n	8007d98 <_printf_common+0x48>
 8007d8a:	f104 0a19 	add.w	sl, r4, #25
 8007d8e:	68e3      	ldr	r3, [r4, #12]
 8007d90:	6832      	ldr	r2, [r6, #0]
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	42ab      	cmp	r3, r5
 8007d96:	dc26      	bgt.n	8007de6 <_printf_common+0x96>
 8007d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	3b00      	subs	r3, #0
 8007da0:	bf18      	it	ne
 8007da2:	2301      	movne	r3, #1
 8007da4:	0692      	lsls	r2, r2, #26
 8007da6:	d42b      	bmi.n	8007e00 <_printf_common+0xb0>
 8007da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dac:	4641      	mov	r1, r8
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c8      	blx	r9
 8007db2:	3001      	adds	r0, #1
 8007db4:	d01e      	beq.n	8007df4 <_printf_common+0xa4>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	6922      	ldr	r2, [r4, #16]
 8007dba:	f003 0306 	and.w	r3, r3, #6
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	bf02      	ittt	eq
 8007dc2:	68e5      	ldreq	r5, [r4, #12]
 8007dc4:	6833      	ldreq	r3, [r6, #0]
 8007dc6:	1aed      	subeq	r5, r5, r3
 8007dc8:	68a3      	ldr	r3, [r4, #8]
 8007dca:	bf0c      	ite	eq
 8007dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dd0:	2500      	movne	r5, #0
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	bfc4      	itt	gt
 8007dd6:	1a9b      	subgt	r3, r3, r2
 8007dd8:	18ed      	addgt	r5, r5, r3
 8007dda:	2600      	movs	r6, #0
 8007ddc:	341a      	adds	r4, #26
 8007dde:	42b5      	cmp	r5, r6
 8007de0:	d11a      	bne.n	8007e18 <_printf_common+0xc8>
 8007de2:	2000      	movs	r0, #0
 8007de4:	e008      	b.n	8007df8 <_printf_common+0xa8>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4652      	mov	r2, sl
 8007dea:	4641      	mov	r1, r8
 8007dec:	4638      	mov	r0, r7
 8007dee:	47c8      	blx	r9
 8007df0:	3001      	adds	r0, #1
 8007df2:	d103      	bne.n	8007dfc <_printf_common+0xac>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	e7c6      	b.n	8007d8e <_printf_common+0x3e>
 8007e00:	18e1      	adds	r1, r4, r3
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	2030      	movs	r0, #48	@ 0x30
 8007e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e0a:	4422      	add	r2, r4
 8007e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e14:	3302      	adds	r3, #2
 8007e16:	e7c7      	b.n	8007da8 <_printf_common+0x58>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	4638      	mov	r0, r7
 8007e20:	47c8      	blx	r9
 8007e22:	3001      	adds	r0, #1
 8007e24:	d0e6      	beq.n	8007df4 <_printf_common+0xa4>
 8007e26:	3601      	adds	r6, #1
 8007e28:	e7d9      	b.n	8007dde <_printf_common+0x8e>
	...

08007e2c <_printf_i>:
 8007e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	7e0f      	ldrb	r7, [r1, #24]
 8007e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e34:	2f78      	cmp	r7, #120	@ 0x78
 8007e36:	4691      	mov	r9, r2
 8007e38:	4680      	mov	r8, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	469a      	mov	sl, r3
 8007e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e42:	d807      	bhi.n	8007e54 <_printf_i+0x28>
 8007e44:	2f62      	cmp	r7, #98	@ 0x62
 8007e46:	d80a      	bhi.n	8007e5e <_printf_i+0x32>
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	f000 80d2 	beq.w	8007ff2 <_printf_i+0x1c6>
 8007e4e:	2f58      	cmp	r7, #88	@ 0x58
 8007e50:	f000 80b9 	beq.w	8007fc6 <_printf_i+0x19a>
 8007e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e5c:	e03a      	b.n	8007ed4 <_printf_i+0xa8>
 8007e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e62:	2b15      	cmp	r3, #21
 8007e64:	d8f6      	bhi.n	8007e54 <_printf_i+0x28>
 8007e66:	a101      	add	r1, pc, #4	@ (adr r1, 8007e6c <_printf_i+0x40>)
 8007e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e6c:	08007ec5 	.word	0x08007ec5
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007e55 	.word	0x08007e55
 8007e78:	08007e55 	.word	0x08007e55
 8007e7c:	08007e55 	.word	0x08007e55
 8007e80:	08007e55 	.word	0x08007e55
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	08007e55 	.word	0x08007e55
 8007e8c:	08007e55 	.word	0x08007e55
 8007e90:	08007e55 	.word	0x08007e55
 8007e94:	08007e55 	.word	0x08007e55
 8007e98:	08007fd9 	.word	0x08007fd9
 8007e9c:	08007f03 	.word	0x08007f03
 8007ea0:	08007f93 	.word	0x08007f93
 8007ea4:	08007e55 	.word	0x08007e55
 8007ea8:	08007e55 	.word	0x08007e55
 8007eac:	08007ffb 	.word	0x08007ffb
 8007eb0:	08007e55 	.word	0x08007e55
 8007eb4:	08007f03 	.word	0x08007f03
 8007eb8:	08007e55 	.word	0x08007e55
 8007ebc:	08007e55 	.word	0x08007e55
 8007ec0:	08007f9b 	.word	0x08007f9b
 8007ec4:	6833      	ldr	r3, [r6, #0]
 8007ec6:	1d1a      	adds	r2, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6032      	str	r2, [r6, #0]
 8007ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e09d      	b.n	8008014 <_printf_i+0x1e8>
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	1d19      	adds	r1, r3, #4
 8007ede:	6031      	str	r1, [r6, #0]
 8007ee0:	0606      	lsls	r6, r0, #24
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0xbc>
 8007ee4:	681d      	ldr	r5, [r3, #0]
 8007ee6:	e003      	b.n	8007ef0 <_printf_i+0xc4>
 8007ee8:	0645      	lsls	r5, r0, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0xb8>
 8007eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	da03      	bge.n	8007efc <_printf_i+0xd0>
 8007ef4:	232d      	movs	r3, #45	@ 0x2d
 8007ef6:	426d      	negs	r5, r5
 8007ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007efc:	4859      	ldr	r0, [pc, #356]	@ (8008064 <_printf_i+0x238>)
 8007efe:	230a      	movs	r3, #10
 8007f00:	e011      	b.n	8007f26 <_printf_i+0xfa>
 8007f02:	6821      	ldr	r1, [r4, #0]
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	0608      	lsls	r0, r1, #24
 8007f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f0c:	d402      	bmi.n	8007f14 <_printf_i+0xe8>
 8007f0e:	0649      	lsls	r1, r1, #25
 8007f10:	bf48      	it	mi
 8007f12:	b2ad      	uxthmi	r5, r5
 8007f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f16:	4853      	ldr	r0, [pc, #332]	@ (8008064 <_printf_i+0x238>)
 8007f18:	6033      	str	r3, [r6, #0]
 8007f1a:	bf14      	ite	ne
 8007f1c:	230a      	movne	r3, #10
 8007f1e:	2308      	moveq	r3, #8
 8007f20:	2100      	movs	r1, #0
 8007f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f26:	6866      	ldr	r6, [r4, #4]
 8007f28:	60a6      	str	r6, [r4, #8]
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	bfa2      	ittt	ge
 8007f2e:	6821      	ldrge	r1, [r4, #0]
 8007f30:	f021 0104 	bicge.w	r1, r1, #4
 8007f34:	6021      	strge	r1, [r4, #0]
 8007f36:	b90d      	cbnz	r5, 8007f3c <_printf_i+0x110>
 8007f38:	2e00      	cmp	r6, #0
 8007f3a:	d04b      	beq.n	8007fd4 <_printf_i+0x1a8>
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f42:	fb03 5711 	mls	r7, r3, r1, r5
 8007f46:	5dc7      	ldrb	r7, [r0, r7]
 8007f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f4c:	462f      	mov	r7, r5
 8007f4e:	42bb      	cmp	r3, r7
 8007f50:	460d      	mov	r5, r1
 8007f52:	d9f4      	bls.n	8007f3e <_printf_i+0x112>
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d10b      	bne.n	8007f70 <_printf_i+0x144>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	07df      	lsls	r7, r3, #31
 8007f5c:	d508      	bpl.n	8007f70 <_printf_i+0x144>
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	6861      	ldr	r1, [r4, #4]
 8007f62:	4299      	cmp	r1, r3
 8007f64:	bfde      	ittt	le
 8007f66:	2330      	movle	r3, #48	@ 0x30
 8007f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007f70:	1b92      	subs	r2, r2, r6
 8007f72:	6122      	str	r2, [r4, #16]
 8007f74:	f8cd a000 	str.w	sl, [sp]
 8007f78:	464b      	mov	r3, r9
 8007f7a:	aa03      	add	r2, sp, #12
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4640      	mov	r0, r8
 8007f80:	f7ff fee6 	bl	8007d50 <_printf_common>
 8007f84:	3001      	adds	r0, #1
 8007f86:	d14a      	bne.n	800801e <_printf_i+0x1f2>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f8c:	b004      	add	sp, #16
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	f043 0320 	orr.w	r3, r3, #32
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	4833      	ldr	r0, [pc, #204]	@ (8008068 <_printf_i+0x23c>)
 8007f9c:	2778      	movs	r7, #120	@ 0x78
 8007f9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	6831      	ldr	r1, [r6, #0]
 8007fa6:	061f      	lsls	r7, r3, #24
 8007fa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fac:	d402      	bmi.n	8007fb4 <_printf_i+0x188>
 8007fae:	065f      	lsls	r7, r3, #25
 8007fb0:	bf48      	it	mi
 8007fb2:	b2ad      	uxthmi	r5, r5
 8007fb4:	6031      	str	r1, [r6, #0]
 8007fb6:	07d9      	lsls	r1, r3, #31
 8007fb8:	bf44      	itt	mi
 8007fba:	f043 0320 	orrmi.w	r3, r3, #32
 8007fbe:	6023      	strmi	r3, [r4, #0]
 8007fc0:	b11d      	cbz	r5, 8007fca <_printf_i+0x19e>
 8007fc2:	2310      	movs	r3, #16
 8007fc4:	e7ac      	b.n	8007f20 <_printf_i+0xf4>
 8007fc6:	4827      	ldr	r0, [pc, #156]	@ (8008064 <_printf_i+0x238>)
 8007fc8:	e7e9      	b.n	8007f9e <_printf_i+0x172>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f023 0320 	bic.w	r3, r3, #32
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	e7f6      	b.n	8007fc2 <_printf_i+0x196>
 8007fd4:	4616      	mov	r6, r2
 8007fd6:	e7bd      	b.n	8007f54 <_printf_i+0x128>
 8007fd8:	6833      	ldr	r3, [r6, #0]
 8007fda:	6825      	ldr	r5, [r4, #0]
 8007fdc:	6961      	ldr	r1, [r4, #20]
 8007fde:	1d18      	adds	r0, r3, #4
 8007fe0:	6030      	str	r0, [r6, #0]
 8007fe2:	062e      	lsls	r6, r5, #24
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0x1c0>
 8007fe8:	6019      	str	r1, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <_printf_i+0x1c6>
 8007fec:	0668      	lsls	r0, r5, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0x1bc>
 8007ff0:	8019      	strh	r1, [r3, #0]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	4616      	mov	r6, r2
 8007ff8:	e7bc      	b.n	8007f74 <_printf_i+0x148>
 8007ffa:	6833      	ldr	r3, [r6, #0]
 8007ffc:	1d1a      	adds	r2, r3, #4
 8007ffe:	6032      	str	r2, [r6, #0]
 8008000:	681e      	ldr	r6, [r3, #0]
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	2100      	movs	r1, #0
 8008006:	4630      	mov	r0, r6
 8008008:	f7f8 f90a 	bl	8000220 <memchr>
 800800c:	b108      	cbz	r0, 8008012 <_printf_i+0x1e6>
 800800e:	1b80      	subs	r0, r0, r6
 8008010:	6060      	str	r0, [r4, #4]
 8008012:	6863      	ldr	r3, [r4, #4]
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	2300      	movs	r3, #0
 8008018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800801c:	e7aa      	b.n	8007f74 <_printf_i+0x148>
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	4632      	mov	r2, r6
 8008022:	4649      	mov	r1, r9
 8008024:	4640      	mov	r0, r8
 8008026:	47d0      	blx	sl
 8008028:	3001      	adds	r0, #1
 800802a:	d0ad      	beq.n	8007f88 <_printf_i+0x15c>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	079b      	lsls	r3, r3, #30
 8008030:	d413      	bmi.n	800805a <_printf_i+0x22e>
 8008032:	68e0      	ldr	r0, [r4, #12]
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	4298      	cmp	r0, r3
 8008038:	bfb8      	it	lt
 800803a:	4618      	movlt	r0, r3
 800803c:	e7a6      	b.n	8007f8c <_printf_i+0x160>
 800803e:	2301      	movs	r3, #1
 8008040:	4632      	mov	r2, r6
 8008042:	4649      	mov	r1, r9
 8008044:	4640      	mov	r0, r8
 8008046:	47d0      	blx	sl
 8008048:	3001      	adds	r0, #1
 800804a:	d09d      	beq.n	8007f88 <_printf_i+0x15c>
 800804c:	3501      	adds	r5, #1
 800804e:	68e3      	ldr	r3, [r4, #12]
 8008050:	9903      	ldr	r1, [sp, #12]
 8008052:	1a5b      	subs	r3, r3, r1
 8008054:	42ab      	cmp	r3, r5
 8008056:	dcf2      	bgt.n	800803e <_printf_i+0x212>
 8008058:	e7eb      	b.n	8008032 <_printf_i+0x206>
 800805a:	2500      	movs	r5, #0
 800805c:	f104 0619 	add.w	r6, r4, #25
 8008060:	e7f5      	b.n	800804e <_printf_i+0x222>
 8008062:	bf00      	nop
 8008064:	080083d6 	.word	0x080083d6
 8008068:	080083e7 	.word	0x080083e7

0800806c <__malloc_lock>:
 800806c:	4801      	ldr	r0, [pc, #4]	@ (8008074 <__malloc_lock+0x8>)
 800806e:	f7ff bc73 	b.w	8007958 <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	20000870 	.word	0x20000870

08008078 <__malloc_unlock>:
 8008078:	4801      	ldr	r0, [pc, #4]	@ (8008080 <__malloc_unlock+0x8>)
 800807a:	f7ff bc6e 	b.w	800795a <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	20000870 	.word	0x20000870

08008084 <_realloc_r>:
 8008084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008088:	4680      	mov	r8, r0
 800808a:	4615      	mov	r5, r2
 800808c:	460c      	mov	r4, r1
 800808e:	b921      	cbnz	r1, 800809a <_realloc_r+0x16>
 8008090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4611      	mov	r1, r2
 8008096:	f7ff bddb 	b.w	8007c50 <_malloc_r>
 800809a:	b92a      	cbnz	r2, 80080a8 <_realloc_r+0x24>
 800809c:	f000 f858 	bl	8008150 <_free_r>
 80080a0:	2400      	movs	r4, #0
 80080a2:	4620      	mov	r0, r4
 80080a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a8:	f000 f89c 	bl	80081e4 <_malloc_usable_size_r>
 80080ac:	4285      	cmp	r5, r0
 80080ae:	4606      	mov	r6, r0
 80080b0:	d802      	bhi.n	80080b8 <_realloc_r+0x34>
 80080b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080b6:	d8f4      	bhi.n	80080a2 <_realloc_r+0x1e>
 80080b8:	4629      	mov	r1, r5
 80080ba:	4640      	mov	r0, r8
 80080bc:	f7ff fdc8 	bl	8007c50 <_malloc_r>
 80080c0:	4607      	mov	r7, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d0ec      	beq.n	80080a0 <_realloc_r+0x1c>
 80080c6:	42b5      	cmp	r5, r6
 80080c8:	462a      	mov	r2, r5
 80080ca:	4621      	mov	r1, r4
 80080cc:	bf28      	it	cs
 80080ce:	4632      	movcs	r2, r6
 80080d0:	f000 f830 	bl	8008134 <memcpy>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f000 f83a 	bl	8008150 <_free_r>
 80080dc:	463c      	mov	r4, r7
 80080de:	e7e0      	b.n	80080a2 <_realloc_r+0x1e>

080080e0 <memmove>:
 80080e0:	4288      	cmp	r0, r1
 80080e2:	b510      	push	{r4, lr}
 80080e4:	eb01 0402 	add.w	r4, r1, r2
 80080e8:	d902      	bls.n	80080f0 <memmove+0x10>
 80080ea:	4284      	cmp	r4, r0
 80080ec:	4623      	mov	r3, r4
 80080ee:	d807      	bhi.n	8008100 <memmove+0x20>
 80080f0:	1e43      	subs	r3, r0, #1
 80080f2:	42a1      	cmp	r1, r4
 80080f4:	d008      	beq.n	8008108 <memmove+0x28>
 80080f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080fe:	e7f8      	b.n	80080f2 <memmove+0x12>
 8008100:	4402      	add	r2, r0
 8008102:	4601      	mov	r1, r0
 8008104:	428a      	cmp	r2, r1
 8008106:	d100      	bne.n	800810a <memmove+0x2a>
 8008108:	bd10      	pop	{r4, pc}
 800810a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800810e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008112:	e7f7      	b.n	8008104 <memmove+0x24>

08008114 <_sbrk_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d06      	ldr	r5, [pc, #24]	@ (8008130 <_sbrk_r+0x1c>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7f9 fe84 	bl	8001e2c <_sbrk>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_sbrk_r+0x1a>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_sbrk_r+0x1a>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	2000087c 	.word	0x2000087c

08008134 <memcpy>:
 8008134:	440a      	add	r2, r1
 8008136:	4291      	cmp	r1, r2
 8008138:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800813c:	d100      	bne.n	8008140 <memcpy+0xc>
 800813e:	4770      	bx	lr
 8008140:	b510      	push	{r4, lr}
 8008142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800814a:	4291      	cmp	r1, r2
 800814c:	d1f9      	bne.n	8008142 <memcpy+0xe>
 800814e:	bd10      	pop	{r4, pc}

08008150 <_free_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4605      	mov	r5, r0
 8008154:	2900      	cmp	r1, #0
 8008156:	d041      	beq.n	80081dc <_free_r+0x8c>
 8008158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815c:	1f0c      	subs	r4, r1, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	bfb8      	it	lt
 8008162:	18e4      	addlt	r4, r4, r3
 8008164:	f7ff ff82 	bl	800806c <__malloc_lock>
 8008168:	4a1d      	ldr	r2, [pc, #116]	@ (80081e0 <_free_r+0x90>)
 800816a:	6813      	ldr	r3, [r2, #0]
 800816c:	b933      	cbnz	r3, 800817c <_free_r+0x2c>
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	6014      	str	r4, [r2, #0]
 8008172:	4628      	mov	r0, r5
 8008174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008178:	f7ff bf7e 	b.w	8008078 <__malloc_unlock>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d908      	bls.n	8008192 <_free_r+0x42>
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	1821      	adds	r1, r4, r0
 8008184:	428b      	cmp	r3, r1
 8008186:	bf01      	itttt	eq
 8008188:	6819      	ldreq	r1, [r3, #0]
 800818a:	685b      	ldreq	r3, [r3, #4]
 800818c:	1809      	addeq	r1, r1, r0
 800818e:	6021      	streq	r1, [r4, #0]
 8008190:	e7ed      	b.n	800816e <_free_r+0x1e>
 8008192:	461a      	mov	r2, r3
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	b10b      	cbz	r3, 800819c <_free_r+0x4c>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d9fa      	bls.n	8008192 <_free_r+0x42>
 800819c:	6811      	ldr	r1, [r2, #0]
 800819e:	1850      	adds	r0, r2, r1
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d10b      	bne.n	80081bc <_free_r+0x6c>
 80081a4:	6820      	ldr	r0, [r4, #0]
 80081a6:	4401      	add	r1, r0
 80081a8:	1850      	adds	r0, r2, r1
 80081aa:	4283      	cmp	r3, r0
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	d1e0      	bne.n	8008172 <_free_r+0x22>
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	6053      	str	r3, [r2, #4]
 80081b6:	4408      	add	r0, r1
 80081b8:	6010      	str	r0, [r2, #0]
 80081ba:	e7da      	b.n	8008172 <_free_r+0x22>
 80081bc:	d902      	bls.n	80081c4 <_free_r+0x74>
 80081be:	230c      	movs	r3, #12
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	e7d6      	b.n	8008172 <_free_r+0x22>
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	1821      	adds	r1, r4, r0
 80081c8:	428b      	cmp	r3, r1
 80081ca:	bf04      	itt	eq
 80081cc:	6819      	ldreq	r1, [r3, #0]
 80081ce:	685b      	ldreq	r3, [r3, #4]
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	bf04      	itt	eq
 80081d4:	1809      	addeq	r1, r1, r0
 80081d6:	6021      	streq	r1, [r4, #0]
 80081d8:	6054      	str	r4, [r2, #4]
 80081da:	e7ca      	b.n	8008172 <_free_r+0x22>
 80081dc:	bd38      	pop	{r3, r4, r5, pc}
 80081de:	bf00      	nop
 80081e0:	20000878 	.word	0x20000878

080081e4 <_malloc_usable_size_r>:
 80081e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e8:	1f18      	subs	r0, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfbc      	itt	lt
 80081ee:	580b      	ldrlt	r3, [r1, r0]
 80081f0:	18c0      	addlt	r0, r0, r3
 80081f2:	4770      	bx	lr

080081f4 <_init>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	bf00      	nop
 80081f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fa:	bc08      	pop	{r3}
 80081fc:	469e      	mov	lr, r3
 80081fe:	4770      	bx	lr

08008200 <_fini>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	bf00      	nop
 8008204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008206:	bc08      	pop	{r3}
 8008208:	469e      	mov	lr, r3
 800820a:	4770      	bx	lr
